name: Deploy Ticket

on:
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        required: true
        description: "Select the environment to deploy"
        options:
          - production
          - staging
          - all
      target:
        type: choice
        required: true
        description: "Select the target to deploy"
        options:
          - web
          - api
          - both

  pull_request:
    types:
      - opened
      - synchronize
      - reopened
    paths-ignore:
      - "docs/**"
      - "apps/app/**"
      - "apps/website/**"
      - "packages/app/**"
      - "**/*.md"
  push:
    branches:
      - main

permissions:
  contents: read
  deployments: write

jobs:
  define-matrix:
    runs-on: ubuntu-latest
    timeout-minutes: 1
    outputs:
      environments: ${{ steps.define-environment-matrix.outputs.environments }}
      deploy-web: ${{ steps.define-target.outputs.deploy-web }}
      deploy-api: ${{ steps.define-target.outputs.deploy-api }}
    steps:
      - name: Decide which environment to deploy
        id: define-environment-matrix
        run: |
          environments=()
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # すべての環境にデプロイする場合
            if [ "${{ github.event.inputs.environment }}" = "all" ]; then
              environments+=("production")
              environments+=("staging")
            else
              # 指定された環境にデプロイする場合
              environments+=("${{ github.event.inputs.environment }}")
            fi
          elif [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref }}" = "refs/heads/main" ]; then
            environments+=("production")
            environments+=("staging")
          else
            echo "他の条件に一致しないため、stagingにデプロイします"
            environments+=("staging")
          fi

          echo "デプロイ先: ${environments[@]}"
          list=$(jq -c -n '$ARGS.positional' --args "${environments[@]}")
          echo "environments=$list" >> $GITHUB_OUTPUT

      - name: Decide which target to deploy
        id: define-target
        run: |
          targets=()
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            if [ "${{ github.event.inputs.target }}" = "both" ]; then
              targets+=("web")
              targets+=("api")
            else
              targets+=("${{ github.event.inputs.target }}")
            fi
          else
            targets+=("web")
            targets+=("api")
          fi

          echo "デプロイ対象: ${targets[@]}"
          for target in "${targets[@]}"; do
            echo "deploy-${target}=true" >> $GITHUB_OUTPUT
          done

  build-ticket-web:
    runs-on: ubuntu-latest
    needs: define-matrix
    if: ${{ needs.define-matrix.outputs.deploy-web }}
    strategy:
      matrix:
        environment: ${{ fromJson(needs.define-matrix.outputs.environments) }}
      fail-fast: false
    steps:
      # https://github.com/actions/checkout
      - name: Checkout
        uses: actions/checkout@d632683dd7b4114ad314bca15554477dd762a938 # v4.2.0

      - name: Setup Application Runtime
        uses: ./.github/actions/setup-application-runtime

      - name: Extract Secrets
        working-directory: apps/ticket_web
        run: |
          echo '${{ secrets.STAGING_ENV_FOR_TICKET }}' | base64 -d > defines/staging.env

      - name: Build Web
        working-directory: apps/ticket_web
        run: |
          flutter build web \
            --release \
            --wasm \
            --dart-define-from-file=defines/${{ matrix.environment }}.env

      - name: Upload Artifacts
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4.4.0
        with:
          name: ticket-web-${{ matrix.environment}}
          path: apps/ticket_web/build/web

  deploy-ticket-web:
    runs-on: ubuntu-latest
    needs:
      - define-matrix
      - build-ticket-web
    strategy:
      matrix:
        environment: ${{ fromJson(needs.define-matrix.outputs.environments) }}
      fail-fast: false
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: ticket-web-${{ matrix.environment }}
          path: ./

      - name: Set Project Name
        id: set-project-name
        run: |
          if [ "${{ matrix.environment == 'production' }}" ]; then
            echo "projectName=flutterkaigi-ticket-2024" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.environment == 'staging' }}" ]; then
            echo "projectName=flutterkaigi-ticket-2024-staging" >> $GITHUB_OUTPUT
          else
            echo "Invalid environment: ${{ matrix.environment }}"
            return 1
          fi

      # https://github.com/cloudflare/pages-action
      - name: Publish to Cloudflare Pages
        uses: cloudflare/pages-action@f0a1cd58cd66095dee69bfa18fa5efd1dde93bca # v1.5.0
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          projectName: ${{ steps.set-project-name.outputs.projectName }}
          directory: ./

  deploy-ticket-api:
    needs:
      - define-matrix
    if: ${{ needs.define-matrix.outputs.deploy-api }}
    strategy:
      matrix:
        environment: ${{ fromJson(needs.define-matrix.outputs.environments) }}
      fail-fast: false
    concurrency:
      group: "deploy-ticket-api-${{ matrix.environment }}"
      cancel-in-progress: false
    runs-on: ubuntu-latest
    steps:
      # https://github.com/actions/checkout
      - name: Checkout
        uses: actions/checkout@d632683dd7b4114ad314bca15554477dd762a938 # v4.2.0

      # https://github.com/pnpm/action-setup
      - uses: pnpm/action-setup@fe02b34f77f8bc703788d5817da081398fad5dd2 # v4.0.0
        name: Install pnpm
        with:
          version: 9
          run_install: |
            - cwd: api

      - name: Deploy to Cloudflare Workers
        run: pnpm run deploy --minify -e ${{ matrix.environment }}
        working-directory: api
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
