[
  {
    "title": "Seamless Flutter Native Integration: FFI & Pigeon",
    "description": "## 概要\r\nThis presentation introduces two tools for bridging Flutter apps with native code: FFI (Foreign Function Interface) and Pigeon. FFI enables direct calls to C/C++ functions, optimizing performance and hardware access. Pigeon streamlines method invocations between Flutter and native platforms (Android/iOS), facilitating better data communication. I’ll demonstrate the implementation and success stories of using these tools to enhance native functionality in Flutter applications.\r\n\r\n## 想定視聴者\r\nAiming to expand knowledge of FFI & Pigeon for native platform integration.\r\n",
    "is_lightning_talk": false,
    "starts_at": "",
    "ends_at": ""
  },
  {
    "title": "体験！マクロ時代のFlutterアプリ開発",
    "description": "## 概要\r\nDart の新機能であるマクロ（Dart macros）の登場により、Flutter アプリ開発で煩雑だったボイラープレートの問題や build_runner によるコード生成の問題の解決が期待されています。\r\n\r\nとはいえマクロはまだまだ試験的に公開されている段階であるために自由に触りづらく、できることを把握してどう活用するかをイメージしづらいのが現状です。サンプルとして話題に上がるマクロも JSON とオブジェクトの変換が簡単になるというもので、Flutter アプリ開発にどれほどのインパクトをもたらす機能なのかをイメージするには力不足です。\r\n\r\nこのセッションでは、実際に Flutter アプリ開発で活用することを想定したマクロをいくつか紹介し、実際にコーディングして使ってみることで、マクロ導入後の Flutter アプリ開発がどのように変化するのかを体験します。\r\n\r\n来るマクロの正式リリースに備え、マクロの活用方法や作り方、そして適切な距離感を今から考えてみませんか？\r\n\r\n## 想定視聴者\r\n- 2025 年以降も Flutter アプリ開発を続ける予定のすべての開発者\r\n- マクロを使う方・作る方どちらの目線もカバーした内容です",
    "is_lightning_talk": false,
    "starts_at": "",
    "ends_at": ""
  },
  {
    "title": "僕のstate restorationアカデミア",
    "description": "## 概要\r\n\r\nユーザーとして、この場面を想像してみてください：アプリAで長文を入力中、何度か他のアプリBに切り替えて使用し、アプリAに戻ったところ、突然すべてのデータが消えてしまいました。OSがアプリAを終了させてしまったのです！それはあまり良くないuxですね。開発者として、どうやってユーザーを挙動不審な行動に対して守ることができますか？実は、state restorationという簡単な解決方法があります。状態管理についてよく話しますが、state restorationのことを忘れることがあります。最新の個人開発アプリ「Japanana」ではこの機能が必要でしたので、実際の例を使ってその実装方法をこの発表で紹介したいと思います。\r\n\r\n## 想定視聴者\r\n\r\n• State restorationについて理解したい開発者\r\n• State restorationを実装したく、その方法を学びたい開発者\r\n• State restorationを実装した後、テスト方法を学びたい開発者\r\n",
    "is_lightning_talk": true,
    "starts_at": "",
    "ends_at": ""
  },
  {
    "title": "OS 標準のデザインシステムを超えて - より柔軟な Flutter テーマ管理",
    "description": "## 概要\r\nFlutter SDK は、Google の Material Design と Apple の Human Interface Guidelines に準拠したテーマ (Material Theme, Cupertino Theme) と関連 API を提供しており、これにより OS 標準のデザインに沿ったアプリ開発が容易になります。\r\nしかし、独自のデザインシステムを採用したい場合にテーマ管理が複雑化したり、OS 標準のデザインシステムアップデートに伴う破壊的変更により開発コストが増大したりする可能性があります。\r\n\r\n本セッションでは、Flutter のテーマと各 Widget のスタイルの関係性を掘り下げ、OS 標準のデザインシステムへの依存を軽減するテーマ管理のアプローチを発表します。\r\nこれにより、独自のデザインシステムの実現や、OS 標準のデザインシステムアップデートの影響を最小限に抑えることを目指します。\r\n加えて、Flutter Roadmap でも触れられている blankcanvas の最新動向についても解説します。\r\n\r\n## 想定視聴者\r\n- 独自のデザインシステムを Flutter アプリに適用したいと考えている開発者\r\n- Flutter のテーマ管理をより深く理解し、効率的な開発手法を学びたい開発者",
    "is_lightning_talk": false,
    "starts_at": "",
    "ends_at": ""
  },
  {
    "title": "DevTools Extensions で独自の DevTool を開発する",
    "description": "## 概要\r\nFlutter におけるアプリ開発において、 DevTools は必要不可欠な存在です。\r\nしかし既存の DevTools に独自の機能をカスタマイズできることはあまり知られていません。\r\nDevTools を独自にカスタマイズすることで、ログの表示制御、キャッシュの表示、アプリ内の開発者用の画面を DevTools に移行するなど、開発体験の向上が見込めます。\r\n\r\nこのセクションでは、devtools_extensions パッケージを使用して、 DevTools を独自にカスタマイズする方法や、\r\n実際のチーム開発でどのような機能をカスタマイズしているかなどの実例を紹介します。\r\n加えてパッケージ製作者向けに自身のパッケージに DevTools Extensions を提供する方法も解説します。\r\n\r\n## 想定視聴者\r\n- DevTools の開発に興味のある方\r\n- チーム開発の生産性を上げたい方\r\n- アプリ内の開発用画面を DevTools に移行させたい方\r\n",
    "is_lightning_talk": false,
    "starts_at": "",
    "ends_at": ""
  },
  {
    "title": "キャッシュレス決済アプリでのFlutterの部分的採用から全面採用まで",
    "description": "## 概要\r\nKDDI株式会社では、au PAYアプリを内製開発しており、2023年に部分的にFlutterを採用しました。\r\n基本的にネイティブ（Kotlin/Swift）で開発しているところに、Add-to-appにより部分的にFlutterを取り入れている形です。\r\nまた、2024年には、ネイティブで開発してきたau PAYの関連アプリをフルリプレイスする形でFlutterを全面採用することにしました。\r\nFlutterの全面採用は、アプリ開発では勿論、API-GWの開発でも採用しており、バックエンドを含めたAll Flutterなプロジェクトになっています。\r\n\r\n本セッションでは、Flutterの部分的採用から全面採用に至るまでに得られた知見を皆様にお届けします。\r\n\r\n・Add-to-appによるFlutterの部分的採用\r\n　・Flutterで開発した機能\r\n　・部分的採用で得られた恩恵と課題\r\n　・状態管理にBlocを採用した話\r\n・バックエンドも含めたFlutter（Dart）の全面採用\r\n　・全面採用に踏み切った理由と狙い\r\n　・All Dartによるクロスファンクショナルな開発\r\n・部分的採用か全面採用かの判断の勘所\r\n\r\n## 想定視聴者\r\n・既存のネイティブアプリにFlutterを部分的に採用することに興味がある方\r\n・現場でFlutterを部分的に採用するか全面採用にするかで迷われている方",
    "is_lightning_talk": false,
    "starts_at": "",
    "ends_at": ""
  },
  {
    "title": "ネットスーパーがスクリーンリーダーに対応した話 ~あるいはアクセシビリティ向上によるユーザー獲得~",
    "description": "## 概要\r\n\r\n​​令和6年（2024年）4月1日に「改正障害者差別解消法」が施行され、事業者による障害のある方への合理的配慮の提供が義務化されました。ECサイトにおいては誰もが安心してサービスを利用できるように、ウェブアクセシビリティの確保が求められています。\r\n\r\nそんななか、私が所属する株式会社10Xで提供している小売チェーン向けECプラットフォームStailerでは視覚障害者の方により便利なネットスーパー・ネットドラッグストア利用体験を提供すべく、スクリーンリーダー（音声読み上げソフト）対応を実施しました。\r\n\r\nスクリーンリーダーはFlutterがフレームワークとしてサポートするアクセシビリティ機能の一つでもあります。他にはフォントサイズやコントラストがサポートされています。\r\n\r\nこのセッションではFlutterが提供するスクリーンリーダーをサポートする機能について説明するとともに、実際にStailerがスクリーンリーダーに対応した際に困ったことやワークアラウンドの紹介、チームにスクリーンリーダー対応を広めるための活動などをお話します。\r\n\r\n参考 https://product.10x.co.jp/entry/2024/07/01/124355\r\n\r\n## 想定視聴者\r\n- アクセシビリティ対応に興味がある方\r\n- チームの実装方針を決めたり広めたりすることがある方\r\n",
    "is_lightning_talk": false,
    "starts_at": "",
    "ends_at": ""
  },
  {
    "title": "より良いLint設定を追い求めて",
    "description": "## 概要\r\nあなたのプロジェクトのLint設定、今どうなっていますか？\r\nこのセッションではより良いLint設定にしていくための基本的な知識から実際の指定例までを解説します。\r\n\r\n- FlutterにおけるLintの設定方法\r\n- Lintのルール一覧\r\n- 著名なLintパッケージ\r\n- 最近追加されたLintルール\r\n- おすすめのLint設定\r\n\r\n## 想定視聴者\r\n- FlutterのLintについてキャッチアップしたい方\r\n- Lintの設定に悩んでいる方\r\n- 最近のLintルールをキャッチアップできていない方\r\n",
    "is_lightning_talk": true,
    "starts_at": "",
    "ends_at": ""
  },
  {
    "title": "CustomMultiChildLayoutを使って、あなたの思い描く自由なレイアウトを作ろう！",
    "description": "## 概要\r\n\r\nFlutterやiOSネイティブアプリ開発でも使われるSwiftUIなどの宣言的なUIは直感的で簡潔な書き方ができる一方、複雑なレイアウトを実装しようとした時に苦戦することがあります\r\n\r\nそんな困った時に、活用できるのがCustomMultiChildLayoutです！\r\nCustomMultiChildLayoutを使うことで、複数のWidgetを自由に配置することができます\r\nそのため実際のプロダクトで凝ったレイアウトを追加したい、また個人開発で遊びで面白いレイアウトを作りたいと思った時に活用できます！\r\n\r\nこのトークではCustomMultiChildLayoutについて、以下のポイントを紹介します\r\n1. CustomMultiChildLayoutの概要\r\n2. 実装の活用例\r\n3. SwiftUIなどの他のframeworkの仕組みとの比較\r\n\r\n発表では社内のライブ配信アプリでの活用事例も含めたあんなものやこんなものをお見せします！（何が見れるかは発表をお楽しみに！）\r\nこの発表を通じて、皆さんがUIを実装する方法の選択肢を広げて、よりよいUI・UXを提供することの手助けができればと思います！\r\n\r\n## 想定視聴者\r\n1. CustomMultiChildLayoutを使ったことない人・知らない人\r\n2. 標準Widgetだけでは実現が難しいUI実装にチャレンジしてみたい人",
    "is_lightning_talk": true,
    "starts_at": "",
    "ends_at": ""
  },
  {
    "title": "Flutterテスト戦略の再考 〜品質と効率のバランスを求めて〜",
    "description": "## 概要\r\n皆さんが普段開発を行っているプロダクトにおける品質は、どのように保証していますか？QAエンジニアによる検証や、実装者が書くテストなど、さまざまな手法が存在すると思います。\r\n\r\nFlutterのテストは一般的に次の3つの種類に分けられます。\r\n\r\n- Unit Test\r\n- Widget Test\r\n- Integration Test\r\n\r\nこれらのテストはそれぞれ異なる役割を持ち、プロダクトの品質を高めるために重要です。特に、Unit TestやWidget Testに分類されるVRT（Visual Regression Testing）であるGolden Testを一度は耳にしたことがある方も多いのではないでしょうか？\r\n\r\nしかし、それらのテストを有効かつ効率的に、そしてメンバーに納得感を持ってもらった状態で導入することは決して容易ではありません。\r\n\r\n本セッションでは、以下のポイントについて議論します。\r\n\r\n各種テストの役割とその効果的な導入方法\r\nUI/UXを分けて考えてテストする方法\r\n小さく始めるためのプラクティス\r\n\r\nFlutterプロジェクトにおける品質保証とテスト効率のバランスを最適化するための具体的なアプローチを提供します。\r\n\r\n## 想定視聴者\r\n- テスト戦略について議論がしたい人\r\n- テストを始めたい、またはすでに導入はできているがあまり効果を実感できていない人",
    "is_lightning_talk": true,
    "starts_at": "",
    "ends_at": ""
  },
  {
    "title": "ImpellerとSkiaについて",
    "description": "Impellerについて知っていますか？Skiaに代わる形で導入されたレンダリングエンジンでFlutter v3.7.0でiOSにおいてpreviewが始まり、v3.16.0ではAndroidでもpreviewが開始されました。\r\n皆さん様々な印象があると思います。有効にしたら動作が速くなった、名前が強そう、シャドウ重くない？などなど...\r\nとはいえ実際にSkiaからどのように変わり、なぜ速くなったのかを理解してる人はあまり多くないと思います。\r\nFlutterはありがたいことにOSSでこの魔法のような技術がどう実現されているかを実際に読むことができます。\r\nこのトークではWidgetTreeから実際に描画されるまでを追いながらSkiaからImpellerでどのように改善されたかを解説していきます。\r\n\r\n## 想定視聴者\r\n- Flutterの内部を知りたい人\r\n- Flutterに根ざして開発したい人\r\n",
    "is_lightning_talk": false,
    "starts_at": "",
    "ends_at": ""
  },
  {
    "title": "Figma Dev Modeで変わる！Flutterの開発体験",
    "description": "## 概要\r\n2024年に発表されたFigmaの新機能 フォーカスビュー、ステータス管理、etc... これらDev Modeの機能の概要を説明すると共に、ベストプラクティスを共有します。\r\nFigma Dev Modeの活用がFlutterの開発体験をどれだけ向上されるかをご覧頂きます。\r\n\r\nエンジニアとデザイナーが共同で発表するこのトークでは、デザインから実装までの一貫したワークフローをロールプレイング形式でお見せします。\r\nエンジニアとデザイナーそれぞれの仕事の相互理解に繋がる内容で、一緒にご覧頂くことで組織のコラボレーションを強化することにも繋がるでしょう。\r\n\r\n## 想定視聴者\r\n- Flutterエンジニア\r\n  デザイナと協業し、Widgetの実装等を行うFlutterエンジニア\r\n- UI/UXデザイナー、\r\n  デザインツールとしてFigmaを利用し、Flutter開発者との協業するデザイナー。\r\n- プロダクトマネージャー\r\n  デザインと開発のプロセスを効率化し、チームのアウトカムを向上させたいマネージャー",
    "is_lightning_talk": false,
    "starts_at": "",
    "ends_at": ""
  },
  {
    "title": "Flutterアプリにおけるユーザー体験の可視化と計測基盤構築",
    "description": "## 概要\r\nSLI/SLOはSREでよく使われる概念ですが、モバイルアプリ開発にはまだ馴染みが薄いかもしれません。\r\n私たちのプロダクトでは障害発生率が高く、早期の検知と解消が求められていました。\r\nそこで、SLI/SLOの概念をモバイルアプリに適用し、ユーザー体験の低下を即時に検知する仕組みを構築しました。\r\n\r\nこの仕組みにより、以下の指標をリアルタイムで監視し、即時に対応可能となりました：\r\n- 失敗率：一定以上のユーザーが機能利用時にエラーが発生したケース\r\n- キャンセル率：一定以上のユーザーが機能利用時に何らかの理由でキャンセルしたケース\r\n- 中断率：一定以上のユーザーが機能利用時にアプリを強制終了したケース\r\n\r\n現在、この監視システムは40以上の機能に適用されています。\r\n\r\nこのセッションでは以下の内容について詳しく解説します：\r\n1. SLI/SLOの基本概念\r\n2. 一般的なSLI/SLOとユーザー体験を検知するSLI/SLOの違い\r\n3. ユーザー行動の計測方法\r\n4. 計測基盤の構築：工夫と課題\r\n   - 時系列データのログ計測\r\n   - 高オブザーバビリティの実現オプション\r\n5. アラート基盤の構築：工夫と課題\r\n   - ノイズ最小化の方法\r\n   - チームにアラートを定着させる方法\r\n\r\n## 想定視聴者\r\n- Flutterアプリ内でのDartを用いた計測基盤構築に興味がある方",
    "is_lightning_talk": false,
    "starts_at": "2024-11-21T10:10:00+09:00",
    "ends_at": "2024-11-21T10:50:00+09:00",
    "room": "A"
  },
  {
    "title": "実践的パッケージ戦略",
    "description": "## 概要\r\nアプリケーションの機能やレイヤーをディレクトリで分けて表現することは普通に行うことだと思います。\r\nこのディレクトリの構成を機能単位やレイヤーでパッケージ化します。\r\n\r\nパッケージ化すると機能ごとの依存度が減り、意図しない機能を実行する危険性を減らすことができます。\r\nまた、単一のパッケージのみテストを実行したり、依存度が少ないことで機能を切り離したりすることも比較的容易になります。\r\n\r\nただし、レイヤーでパッケージ化する場合はある程度入念な設計が必要になります。\r\n例えば、 UI から直接通信処理を実行させたくないような場合、単純にパッケージを分割しているだけではファイルをインポートすることで簡単に処理を実行できてしまい、あまりその恩恵を受けることができません。\r\nこの恩恵を受けるための一つの手法として依存性逆転の原則があります。\r\n\r\nここでは、 Riverpod を利用した依存性逆転の原則の実装の説明と melos を利用した依存の解決方法、並列でテストを実行した際のカバレッジの算出など、開発の現場で行った実践的なお話をさせてもらいます。\r\n\r\n## 想定視聴者\r\n- これからサービスを立ち上げる方\r\n- アプリケーションが大きくなって依存の整理に苦しんでいる方\r\n",
    "is_lightning_talk": false,
    "starts_at": "",
    "ends_at": ""
  },
  {
    "title": "気をつけたい！Desktop対応で陥りやすい罠とその対策",
    "description": "## 概要\r\nMobile向けに開発したものをWebや他のDesktopプラットフォームで表示すると、「なんか違う？」と感じたことはありませんか？\r\n本セッションでは、MobileとDesktopをワンソースで開発する中で遭遇した実際の事例を基に、Desktopプラットフォームでの開発時に特に注意が必要なポイントを詳しく解説します。\r\n\r\n- MobileとDesktopプラットフォームの違いについての概要\r\n- プロジェクトで遭遇した具体的な事例の紹介\r\n- 注意が必要なWidgetと、それぞれの対応策\r\n- プラットフォームごとの差分を考慮した開発手法の提案\r\n\r\n## 想定視聴者\r\n- MobileアプリをDesktopプラットフォームに展開しようと考えている方\r\n- Desktopプラットフォームでの開発に興味がある方\r\n- ワンソースでの複数プラットフォーム対応に挑戦している方\r\n- Desktopプラットフォームの開発経験が少ない方\r\n",
    "is_lightning_talk": false,
    "starts_at": "",
    "ends_at": ""
  },
  {
    "title": "Flutterアプリで可用性を向上させたFeatureFlagの運用戦略とその方法",
    "description": "## 概要\r\nWINTICKETアプリは2021年からトランクベース開発をFeatureFlagを取り入れながら行ってきました。\r\n大規模が故に常に10数個のFeatureFlagをコードベースに埋め込みながら新機能の開発を進めていますが、公開前の機能が見えてしまったり、リリース前のコードが実行されてしまうなどの問題がいくつかありました。\r\n\r\n本セッションではFeatureFlag運用を3年ほどした経験から、WINTICKETアプリ開発での具体的な運用方法とどのように可用性を向上させたFeatureFlagの運用戦略をとっているかを紹介します。\r\n\r\n・WINTICKETでどのようにFlutterでFeatureFlagを用いたトランクベース開発の運用をしているかの紹介\r\n・その運用で実際に起きた不具合例の紹介\r\n・そのような不具合がどのような原因で発生したのかの分析\r\n・不具合を起こさないためのFeatureFlag運用戦略とその具体的な対応方法の紹介\r\n\r\n## 想定視聴者\r\n・FeatureFlagを用いたトランクベース開発をしている方\r\n・FlutterアプリでFeatureFlagを用いたトランクベース開発を検討している方\r\n",
    "is_lightning_talk": false,
    "starts_at": "",
    "ends_at": ""
  },
  {
    "title": "アニメーションを最深まで理解してパフォーマンスを向上させる",
    "description": "## 概要\r\nFlutter でのアニメーション実装は、簡易に実装できてアプリの魅力を向上させる重要な機能ですが、複雑なアニメーションや大規模なアプリケーションでは、パフォーマンスの問題に直面することがあります。\r\n複雑なアニメーションを実装する際、フレームレートの低下やメモリ使用量の増加など、パフォーマンスの低下が課題となっています。また、アニメーションの最適化手法や、適切なタイミングでの RepaintBoundary の使用など、開発者が理解すべき点が多岐にわたります。\r\n本セッションでは、 Flutter のアニメーションを深く理解し、パフォーマンスを向上させるための実践的な手法を紹介します。 Flow を活用した複雑なアニメーションの実装、アニメーションのパフォーマンス最適化テクニック、そしてレンダリングを最小限に抑えるための tips について詳しく解説します。\r\n1. Flutter アニメーションの基本概念と内部実装を理解する\r\n2. Flow を使用した高度なアニメーションの実装手法\r\n3. アニメーションパフォーマンスの測定と分析\r\n4. レンダリング最適化テクニック\r\n\r\n## 想定視聴者\r\n・ 複雑なアニメーションの実装に苦戦している開発者\r\n・ アニメーションのパフォーマンス向上に興味がある開発者",
    "is_lightning_talk": false,
    "starts_at": "",
    "ends_at": ""
  },
  {
    "title": "Effective Form ~ Flutterによる複雑なフォーム開発の実践 ~",
    "description": "## 概要\r\n\r\n「フォーム」を取り扱うアプリの機能実装は、考慮すべき点が多岐に渡り、難易度が非常に高い部分です。\r\n\r\n例えば、商品注文や申請作成の入力画面は、単純な入力画面とは性質が異なり、複雑な仕様の中でミスができない実装が求められます。\r\nそこでは、高度なバリデーションや、複数ソースからの動的なデータ取得・更新など、「複雑なロジックをフロントで実装する必要がある」点で多くの課題が存在します。\r\n\r\nFlutterの活用は、開発効率を上げる有効な手段の１つですが、単に導入するだけでは上記課題は解消しきれません。\r\n本トークでは、複雑度が極めて高いフォーム開発を、宣言的かつ型安全に保つことで、効率的に実現する方法をご紹介します。\r\n\r\nトピック\r\n\r\n- Flutterでのフォーム画面開発\r\n  - 実プロダクトの事例紹介\r\n- 状態管理とバリデーションのアプローチ\r\n  - 状態設計の手法\r\n  - Riverpod, flutter_hooksの活用\r\n  - フォーム要素間の相互依存関係の処理\r\n  - 複数画面間でのデータ同期の実装\r\n- ユーザー体験向上の工夫\r\n  - エラー、アラートのフィードバック\r\n  - 入力補助\r\n  - 細かな操作感\r\n\r\n## 想定視聴者\r\n\r\n- フォーム開発の設計や実装に悩んだことがある方\r\n- Flutterを使って効率的に複雑なフォームを実装したい方",
    "is_lightning_talk": false,
    "starts_at": "",
    "ends_at": ""
  },
  {
    "title": "Firebase Dynamic Links終了に備える：FlutterアプリでのAdjust導入とディープリンク最適化",
    "description": "##概要\r\n2025年8月にFirebase Dynamic Links（FDL）のサービスが終了することが発表され、多くのアプリ開発者がAdjust、AppsFlyer、Bitly、Branch、Kochavaなど代替ソリューションの選定を迫られています。\r\n\r\n本セッションでは、実際のプロダクトで行ったFDLからAdjustへの移行作業を通じて、FDLの主要な機能をカバーしつつ、Adjustを用いたディープリンクの設定方法、ディープリンク機能の実装例、分析に不可欠なログの実装方法、およびパーソナライズされたユーザー体験を提供するための戦略とその制約を紹介します。\r\n\r\nこれにより、FDL終了後のアプリ開発において、どのようにスムーズな移行を実現し、必要な機能を維持するかについて、明確な指針を提供します。このセッションを通じて、ディープリンク技術がどのようにアプリの成長と成功を支えるかを理解し、実際の開発に役立つ知識を提供します。\r\n\r\n## 想定視聴者\r\n- FDLを利用したプロダクトを運用しており、代替の移行先を検討している方\r\n- ユーザーエンゲージメントの向上やアプリの成長に関心があり、ディープリンク技術を活用したいと考えている方\r\n",
    "is_lightning_talk": false,
    "starts_at": "",
    "ends_at": ""
  },
  {
    "title": "Master of Isolate",
    "description": "## 概要\r\nDartでは、非同期処理と並行処理を効率的に行うためのキーコンポーネントとしてIsolateが提供されています。\r\n特にFlutterアプリケーションのパフォーマンス向上やレスポンス性の向上において、Isolateの正しい理解と活用は非常に重要です。\r\n\r\nこのセッションでは、DartのIsolateの内部動作を深く掘り下げ、どのようにしてメモリを共有せずに並行処理を実現しているのかを解説します。また、実際のアプリケーション開発における典型的な使用例とベストプラクティスを紹介し、皆さんのコード品質を一段階上げる手助けをします。\r\n\r\nこのセッションの内容は以下の通りです：\r\n\r\n- Isolateの基本概念とFutureとの違い\r\n- DartにおけるIsolateの内部メカニズム\r\n- メインIsolateとサブIsolate間の通信方法\r\n- Isolateを使うべき箇所とそうでない箇所\r\n\r\n想定視聴者：\r\n- DartやFlutterでの非同期処理を深く理解したい方\r\n- アプリケーションのパフォーマンスを最適化したいFlutter開発者\r\n- Isolateの使い方に課題を感じている方\r\n- 並行処理を活用し、スケーラブルなアプリケーションを作りたいエンジニア\r\n- 実際のIsolateを理解した上で、活用したユースケース",
    "is_lightning_talk": true,
    "starts_at": "",
    "ends_at": ""
  },
  {
    "title": "Flutter を言い訳にしない！アプリの使い心地改善テクニック5選🔥",
    "description": "## 概要\r\nある日，チームメンバーから『普段使っている他のアプリと比べてな〜んか使い心地が悪い…😅💦』という声が上がりました．\r\nアプリが数多く存在するこの時代，『なんか使い心地が悪い』とユーザはすぐ離れていってしまいます．これは大問題です．なんとかしなくては…！\r\n\r\n具体的には，以下のような使い心地の悪さの声が上がりました．\r\n- 動画再生するとアプリが重くなる\r\n- リストをスクロールするとカクつく\r\n- iPhone だと文字が細くて見にくかったり絵文字表示が小さく感じる\r\n- 画像のトリミングが遅い\r\n- etc…\r\n\r\nそこで，このセッションでは以下のトピックについてお話しします．\r\n- 使い心地に関するトラブルにどう対処したのかを5つ紹介🔥\r\n- 既存ライブラリではちょっと物足りないときに改修する方法（パッチの当て方）🛠️\r\n\r\n## 想定視聴者\r\n- アプリをただ作るだけではなく使い心地を追求したい人\r\n- Flutter であることを言い訳にクオリティを妥協したことがある人\r\n",
    "is_lightning_talk": true,
    "starts_at": "",
    "ends_at": ""
  },
  {
    "title": "SliverAppBarはなぜ変化する？ ~ Sliverを内側から理解する ~",
    "description": "## 概要\r\nSliverAppBarはスクロールに応じて大きさが変化したり、スクロールを中断時に出現したりするAppBarのWidgetです。\r\nちょっとリッチなスクロールを実装する際に利用するこのWidget、\r\nどうしてこのような動きが実現できるのでしょうか？\r\nSliverAppBarを題材に、FlutterのSliverの中身を深掘りして解説します。\r\nまた、Flutter 3.24で追加されたPinnedHeaderSliver、SliverResizingHeaderについても、中身を解説します。\r\n\r\n具体的には以下の内容について解説します。\r\n- SliverAppBar の動き\r\n- Sliverとは\r\n- Sliverの仕組み\r\n- SliverAppBarの仕組み\r\n- PinnedHeaderSliver、SliverResizingHeaderについて\r\n\r\nFlutterでのスクロール画面でのエラーに対し、\r\nCustomScrollView、Sliverの利用はよく採用される解決策です。\r\n今回の発表を通してSliverへの理解を深めていただき、\r\n開発力の向上の一助となればと思います。\r\n\r\n## 想定視聴者\r\n\r\n- Flutterでリッチなスクロール画面を実装したい方\r\n- Flutterの内部実装に興味のある方\r\n- Sliverの取り扱いに悩んでいる方",
    "is_lightning_talk": false,
    "starts_at": "",
    "ends_at": ""
  },
  {
    "title": "Dart Native Assets で広がる開発の幅",
    "description": "## 概要\r\nDart や Flutter ではいままで、ビルド時に追加の処理を行う手段がありませんでした。\r\nしかし最近、 Native Assets と呼ばれる新機能が追加され、ビルド時に追加の処理を行うことが可能になりました。\r\n本LTでは、 Native Assets とはそもそもどんな機能なのか、どのように活用できるのかをお話しします。\r\n\r\n\r\n## 想定視聴者\r\nDart/Flutter でアプリやパッケージ開発をする方全般\r\n特に、FFIを用いた開発をしている方",
    "is_lightning_talk": true,
    "starts_at": "",
    "ends_at": ""
  },
  {
    "title": "Shorebirdを活用したFlutterアプリの即時アップデート：Code Pushの実践と可能性",
    "description": "本セッションでは、Flutterアプリの「Code Push」（即時コードアップデート）を実現するShorebirdについて深掘りします。Shorebirdを使用することで、FlutterアプリのDartコード部分の更新を、ストア審査なしでエンドユーザーのデバイスに即座に配信できます。\r\n\r\nただし、以下の重要な点に注意が必要です：\r\n- 初回リリースや大幅な変更時は従来通りの審査が必要\r\n- 更新できるのはDartコードのみ（ネイティブコードは不可）\r\n- 各アプリストアの規約遵守が必須\r\n\r\nこのセッションでは、以下の点に焦点を当てます：\r\n- Shorebirdの基本概念と仕組み\r\n- Code Pushの使用方法（ライブデモ含む）\r\n- CI/CDとの統合\r\n- 料金体系\r\n- Shorebirdの利点と課題\r\n- 実プロジェクトでの経験に基づく知見と教訓\r\n- アプリストア規約との整合性と法的考慮事項\r\n\r\n想定視聴者：\r\n- 即時アップデートに関心のある開発者\r\n- Shorebirdを検討中の方\r\n- 実践的な使用例を知りたい方\r\n\r\n複数プロジェクトでのShorebird導入・運用経験を基に、実践的な洞察と具体的なアドバイスを提供します。理論と実践の両面から、Shorebirdの効果的かつ適切な活用方法をお伝えします。技術的側面だけでなく、法的な観点からも安全な利用指針を示します。",
    "is_lightning_talk": false,
    "starts_at": "",
    "ends_at": ""
  },
  {
    "title": "Flutterと難読化",
    "description": "## 概要\r\nリリースしたアプリのクラッシュ事例を追うべく、Crashlyticsなどのサービスを眺めていると、身に覚えのないスタックトレースを見た経験はありませんか？ Flutter では release buildの場合には、コードが難読化されバイナリに含まれます。\r\nFlutterはAndroid・iOSをはじめとして多くのプラットフォームで動作させる事ができるフレームワークです。Flutterはどのようにして、多くのプラットフォームをサポートする難読化を実現しているのでしょうか？\r\n\r\nこのセッションは、大きく2つの要素から構成されます。\r\n1つ目は、難読化されたコードに直面したときのトラブルシューティングに焦点を当てたものです。例えば、難読化されたスタックトレースを読む方法や、flutter symbolize の仕組みやオプションについて紹介します。\r\n2つ目は、Flutter の難読化そのものがどのようにして行われるかについて焦点を当てます。Flutterが難読化を行うステップと各プラットフォームでの実例を紹介しつつどのような難読化が行われるかについて紹介します。\r\n\r\n## 想定視聴者\r\n- 難読化に関連したトラブルシューティングについて知りたい人\r\n- 難読化そのものについて理解を深めたい人\r\n- Flutter 特有のマルチプラットフォームでの難読化について知りたい人",
    "is_lightning_talk": false,
    "starts_at": "",
    "ends_at": ""
  },
  {
    "title": "WasmがFlutter on the Webにもたらす変化",
    "description": "Flutter on the WebがStableになってから３年経ち、さまざまな変化が加えられてきました。\r\n今年はHTML renderer廃止に関するドキュメントが公開され、今後CanvasとWasmのrendererが主力になっていきます\r\nWasmサポートによって良くなること、できなくなることをHTML,Canvas rendererと実際に動作を比較していきます。\r\n\r\nこのセッションでは、以下の内容についてお話しします：\r\n1. Wasmとは一体何なのか\r\n2. Flutter on the WebのWasmサポートで何が変わったのか\r\n3. Wasmサポートで、できるようになること、できなくなることをHTML,Canvasとの比較\r\n4. Flutter on the Webの今後\r\n\r\n想定視聴者\r\nFlutter on the WebのWasmサポートで何が変わるか興味がある方",
    "is_lightning_talk": false,
    "starts_at": "2024-11-21T10:10:00+09:00",
    "ends_at": "2024-11-21T10:50:00+09:00",
    "room": "A"
  },
  {
    "title": "キャンセルします！処理を",
    "description": "## スポンサー名\r\n\r\n株式会社ビットキー\r\n\r\n## 概要\r\n\r\n処理をキャンセルするというパターンを取り入れると、非同期処理の内容の整理に役立つことがあります。\r\n時間がかかる処理をタイムアウトさせたり、ユーザーの希望に応じて止めたり、あるいは複数のうち最も早い応答だけを採用するような処理に効果的です。\r\n結果として不要な処理や通信が抑えられ、あなたのアプリの動きのレベルを一段引き上げることにもつながります。\r\n\r\n本セッションでは、 協調的なキャンセルの考え方を `dart:async` の `Timer` を例に紹介したうえで、\r\nSwift Concurrency や Kotlin Coroutine のキャンセルを、 Method Channel で Flutter の世界に持ち込む方法を解説します。\r\nさらに、 Riverpod の `.autoDispose` と合わせて、キャンセルをアプリに組み込む方法についてもお話しします。\r\n\r\n## 想定視聴者\r\n\r\n* タイムアウトの実装方法にお悩みの方\r\n* ユーザーの「やっぱりやめたい」という思いに応えたい方\r\n* Flutter から Swift Concurrency や Kotlin Coroutine を扱いたい方",
    "talk_length": "スポンサーセッション",
    "starts_at": "",
    "ends_at": ""
  },
  {
    "title": "マッチングアプリ『Omiai 』のFlutterへのリプレイスの挑戦",
    "description": "## スポンサー名\r\n株式会社Omiai\r\n\r\n## 概要\r\n株式会社Omiai では、長年運営してきたマッチングアプリ『Omiai 』をFlutterでリプレイスする取り組みを進めています。\r\n\r\niOS・Android 両プラットフォームの古いコードベースが抱える技術的負債や仕様の差異などの課題解決を目指し、ゼロからのFlutterプロジェクト始動を機に、様々な改善や工夫に挑戦しています。\r\n\r\n本セッションでは、以下の取り組みを中心に、OmiaiのFlutterリプレイスについて紹介します。\r\n\r\n• マルチパッケージ構成を活用し、依存の向きを厳密に管理したアーキテクチャ\r\n• 業務ロジック層およびそれより抽象的な層のユニットテストをカバレッジ100%で記述する運用\r\n• public_member_api_docsの全面適用など、採用しているlintルールやcustom_lint\r\n• Flutter経験のないエンジニアができるだけスムーズに開発に参画できるキャッチアップ方法\r\n• マージとデプロイのタイミングを分離したブランチ運用とリリースフロー\r\n• Add-to-Appによる段階的なリプレイス\r\n\r\n## 想定視聴者\r\n• Flutter プロジェクトをこれから立ち上げる方\r\n• 既存プロジェクトの開発生産性や保守性に課題を感じている方\r\n• アーキテクチャ設計、テスト戦略、チーム育成などの知見を得たい方\r\n",
    "talk_length": "スポンサーセッション",
    "starts_at": "",
    "ends_at": ""
  }
]
