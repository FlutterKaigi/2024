import 'dart:convert';

import 'package:common_data/session.dart';
import 'package:common_data/src/model/view/session_venues_with_sessions_v3_view.dart';
import 'package:common_data/src/model/view/session_venues_with_sessions_v4_view.dart';
import 'package:common_data/src/repository/speaker_repository.dart';
import 'package:common_data/src/repository/sponsor_repository.dart';
import 'package:common_data/src/supabase_client.dart';
import 'package:riverpod/riverpod.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';
import 'package:supabase_flutter/supabase_flutter.dart' hide Session;

part 'session_repository.g.dart';

@Riverpod(keepAlive: true)
SessionRepository sessionRepository(Ref ref) => SessionRepository(
      client: ref.watch(supabaseClientProvider),
      sponsorRepository: ref.watch(sponsorRepositoryProvider),
      speakerRepository: ref.watch(speakerRepositoryProvider),
    );

class SessionRepository {
  SessionRepository({
    required SupabaseClient client,
    required SponsorRepository sponsorRepository,
    required SpeakerRepository speakerRepository,
  })  : _client = client,
        _sponsorRepository = sponsorRepository,
        _speakerRepository = speakerRepository;

  final SupabaseClient _client;
  final SponsorRepository _sponsorRepository;
  final SpeakerRepository _speakerRepository;

  @Deprecated('Use fetchSessionVenuesWithSessionsV4 instead')
  Future<List<SessionVenuesWithSessionsV3>>
      fetchSessionVenuesWithSessionsV3() async {
    final json = jsonDecode(_jsonContentV3) as List<dynamic>;
    final result = json
        .map(
          (e) => SessionVenuesWithSessionsV3View.fromJson(
            e as Map<String, dynamic>,
          ),
        )
        .toList();
    return result.map(toSessionVenuesWithSessionsV3).toList();
  }

  Future<List<SessionVenuesWithSessionsV4>>
      fetchSessionVenuesWithSessionsV4() async {
    final json = jsonDecode(_jsonContentV4) as List<dynamic>;
    final result = json
        .map(
          (e) => SessionVenuesWithSessionsV4View.fromJson(
            e as Map<String, dynamic>,
          ),
        )
        .toList();
    return result.map(toSessionVenuesWithSessionsV4).toList();
  }

  Future<List<Session>> fetchSessions() async {
    final json = jsonDecode(_jsonContentSessions) as List<dynamic>;
    return json
        .map((e) => Session.fromJson(e as Map<String, dynamic>))
        .toList();
  }

  SessionVenuesWithSessionsV3 toSessionVenuesWithSessionsV3(
    SessionVenuesWithSessionsV3View sessionVenuesWithSessionsV3View,
  ) =>
      SessionVenuesWithSessionsV3(
        id: sessionVenuesWithSessionsV3View.id,
        name: sessionVenuesWithSessionsV3View.name,
        sessions: sessionVenuesWithSessionsV3View.sessions
            .map(_toSessionsWithSpeakerSponsorV3View)
            .toList(),
      );

  SessionsWithSpeakerSponsorV3 _toSessionsWithSpeakerSponsorV3View(
    SessionsWithSpeakerSponsorV3View sessionsWithSpeakerSponsorV3View,
  ) =>
      SessionsWithSpeakerSponsorV3(
        id: sessionsWithSpeakerSponsorV3View.id,
        title: sessionsWithSpeakerSponsorV3View.title,
        description: sessionsWithSpeakerSponsorV3View.description,
        startsAt: sessionsWithSpeakerSponsorV3View.startsAt,
        endsAt: sessionsWithSpeakerSponsorV3View.endsAt,
        isLightningTalk: sessionsWithSpeakerSponsorV3View.isLightningTalk,
        speakers: sessionsWithSpeakerSponsorV3View.speakers
            .map(_speakerRepository.toSpeaker)
            .toList(),
        sponsors: sessionsWithSpeakerSponsorV3View.sponsors
            .map(_sponsorRepository.toSponsorV2)
            .toList(),
      );

  SessionVenuesWithSessionsV4 toSessionVenuesWithSessionsV4(
    SessionVenuesWithSessionsV4View sessionVenuesWithSessionsV4View,
  ) =>
      SessionVenuesWithSessionsV4(
        id: sessionVenuesWithSessionsV4View.id,
        name: sessionVenuesWithSessionsV4View.name,
        sessions: sessionVenuesWithSessionsV4View.sessions
            .map(_toSessionsWithSpeakerSponsorV4View)
            .toList(),
      );

  SessionsWithSpeakerSponsorV4 _toSessionsWithSpeakerSponsorV4View(
    SessionsWithSpeakerSponsorV4View sessionsWithSpeakerSponsorV4View,
  ) =>
      SessionsWithSpeakerSponsorV4(
        id: sessionsWithSpeakerSponsorV4View.id,
        title: sessionsWithSpeakerSponsorV4View.title,
        description: sessionsWithSpeakerSponsorV4View.description,
        startsAt: sessionsWithSpeakerSponsorV4View.startsAt,
        endsAt: sessionsWithSpeakerSponsorV4View.endsAt,
        isLightningTalk: sessionsWithSpeakerSponsorV4View.isLightningTalk,
        videoUrl: sessionsWithSpeakerSponsorV4View.videoUrl,
        speakers: sessionsWithSpeakerSponsorV4View.speakers
            .map(_speakerRepository.toSpeaker)
            .toList(),
        sponsors: sessionsWithSpeakerSponsorV4View.sponsors
            .map(_sponsorRepository.toSponsorV2)
            .toList(),
      );
}

const _jsonContentSessions =
    r'''[{"id":"18ffaf08-03ac-4284-95cf-bd217dbccd69","title":"OS 標準のデザインシステムを超えて - より柔軟な Flutter テーマ管理","description":"## 概要\nFlutter SDK は、Google の Material Design と Apple の Human Interface Guidelines に準拠したテーマ (Material Theme, Cupertino Theme) と関連 API を提供しており、これにより OS 標準のデザインに沿ったアプリ開発が容易になります。\nしかし、独自のデザインシステムを採用したい場合にテーマ管理が複雑化したり、OS 標準のデザインシステムアップデートに伴う破壊的変更により開発コストが増大したりする可能性があります。\n\n本セッションでは、Flutter のテーマと各 Widget のスタイルの関係性を掘り下げ、OS 標準のデザインシステムへの依存を軽減するテーマ管理のアプローチを発表します。\nこれにより、独自のデザインシステムの実現や、OS 標準のデザインシステムアップデートの影響を最小限に抑えることを目指します。\n加えて、Flutter Roadmap でも触れられている blankcanvas の最新動向についても解説します。\n\n## 想定視聴者\n- 独自のデザインシステムを Flutter アプリに適用したいと考えている開発者\n- Flutter のテーマ管理をより深く理解し、効率的な開発手法を学びたい開発者","starts_at":"2024-11-22T04:30:00+00:00","ends_at":"2024-11-22T05:10:00+00:00","venue_id":"d6432c3c-3ef9-44ef-aa69-78f5e4dd867d","sponsor_id":null,"is_lightning_talk":false,"created_at":"2024-10-23T15:35:45.354058+00:00","video_url":"https://www.youtube.com/watch?v=7RB2YTnbukI"},{"id":"83119f09-e90c-468b-9a5e-69d2df646dfb","title":"DevTools Extensions で独自の DevTool を開発する","description":"## 概要\nFlutter におけるアプリ開発において、 DevTools は必要不可欠な存在です。\nしかし既存の DevTools に独自の機能をカスタマイズできることはあまり知られていません。\nDevTools を独自にカスタマイズすることで、ログの表示制御、キャッシュの表示、アプリ内の開発者用の画面を DevTools に移行するなど、開発体験の向上が見込めます。\n\nこのセクションでは、devtools_extensions パッケージを使用して、 DevTools を独自にカスタマイズする方法や、\n実際のチーム開発でどのような機能をカスタマイズしているかなどの実例を紹介します。\n加えてパッケージ製作者向けに自身のパッケージに DevTools Extensions を提供する方法も解説します。\n\n## 想定視聴者\n- DevTools の開発に興味のある方\n- チーム開発の生産性を上げたい方\n- アプリ内の開発用画面を DevTools に移行させたい方","starts_at":"2024-11-22T07:30:00+00:00","ends_at":"2024-11-22T08:10:00+00:00","venue_id":"d6432c3c-3ef9-44ef-aa69-78f5e4dd867d","sponsor_id":null,"is_lightning_talk":false,"created_at":"2024-10-23T15:35:45.420406+00:00","video_url":"https://www.youtube.com/watch?v=BPb1PQ_EW9A"},{"id":"454605d6-b1b5-40f4-85c6-1636a6c32b1a","title":"Flutterアプリで可用性を向上させたFeatureFlagの運用戦略とその方法","description":"## 概要\nWINTICKETアプリは2021年からトランクベース開発をFeatureFlagを取り入れながら行ってきました。\n大規模が故に常に10数個のFeatureFlagをコードベースに埋め込みながら新機能の開発を進めていますが、公開前の機能が見えてしまったり、リリース前のコードが実行されてしまうなどの問題がいくつかありました。\n\n本セッションではFeatureFlag運用を3年ほどした経験から、WINTICKETアプリ開発での具体的な運用方法とどのように可用性を向上させたFeatureFlagの運用戦略をとっているかを紹介します。\n\n・WINTICKETでどのようにFlutterでFeatureFlagを用いたトランクベース開発の運用をしているかの紹介\n・その運用で実際に起きた不具合例の紹介\n・そのような不具合がどのような原因で発生したのかの分析\n・不具合を起こさないためのFeatureFlag運用戦略とその具体的な対応方法の紹介\n\n## 想定視聴者\n・FeatureFlagを用いたトランクベース開発をしている方\n・FlutterアプリでFeatureFlagを用いたトランクベース開発を検討している方","starts_at":"2024-11-21T04:00:00+00:00","ends_at":"2024-11-21T04:40:00+00:00","venue_id":"f6ee9501-0698-44ea-ad21-eb051ee94a8e","sponsor_id":null,"is_lightning_talk":false,"created_at":"2024-10-23T15:35:46.035295+00:00","video_url":"https://www.youtube.com/watch?v=9Zgqaj8jnug"},{"id":"f4966e95-b266-4edc-abde-f61c359b3a40","title":"キャッシュレス決済アプリでのFlutterの部分的採用から全面採用まで","description":"## 概要\nKDDI株式会社では、au PAYアプリを内製開発しており、2023年に部分的にFlutterを採用しました。\n基本的にネイティブ（Kotlin/Swift）で開発しているところに、Add-to-appにより部分的にFlutterを取り入れている形です。\nまた、2024年には、ネイティブで開発してきたau PAYの関連アプリをフルリプレイスする形でFlutterを全面採用することにしました。\nFlutterの全面採用は、アプリ開発では勿論、API-GWの開発でも採用しており、バックエンドを含めたAll Flutterなプロジェクトになっています。\n\n本セッションでは、Flutterの部分的採用から全面採用に至るまでに得られた知見を皆様にお届けします。\n\n・Add-to-appによるFlutterの部分的採用\n  ・Flutterで開発した機能\n  ・部分的採用で得られた恩恵と課題\n  ・状態管理にBlocを採用した話\n・バックエンドも含めたFlutter（Dart）の全面採用\n  ・全面採用に踏み切った理由と狙い\n  ・All Dartによるクロスファンクショナルな開発\n・部分的採用か全面採用かの判断の勘所\n\n## 想定視聴者\n・既存のネイティブアプリにFlutterを部分的に採用することに興味がある方\n・現場でFlutterを部分的に採用するか全面採用にするかで迷われている方","starts_at":"2024-11-21T06:40:00+00:00","ends_at":"2024-11-21T07:20:00+00:00","venue_id":"f6ee9501-0698-44ea-ad21-eb051ee94a8e","sponsor_id":null,"is_lightning_talk":false,"created_at":"2024-10-23T15:35:46.113082+00:00","video_url":"https://www.youtube.com/watch?v=lV86cyGFHyI"},{"id":"4156b633-8043-4d94-8da8-39c367088c59","title":"アニメーションを最深まで理解してパフォーマンスを向上させる","description":"## 概要\nFlutter でのアニメーション実装は、簡易に実装できてアプリの魅力を向上させる重要な機能ですが、複雑なアニメーションや大規模なアプリケーションでは、パフォーマンスの問題に直面することがあります。\n複雑なアニメーションを実装する際、フレームレートの低下やメモリ使用量の増加など、パフォーマンスの低下が課題となっています。また、アニメーションの最適化手法や、適切なタイミングでの RepaintBoundary の使用など、開発者が理解すべき点が多岐にわたります。\n本セッションでは、 Flutter のアニメーションを深く理解し、パフォーマンスを向上させるための実践的な手法を紹介します。 Flow を活用した複雑なアニメーションの実装、アニメーションのパフォーマンス最適化テクニック、そしてレンダリングを最小限に抑えるための tips について詳しく解説します。\n1. Flutter アニメーションの基本概念と内部実装を理解する\n2. Flow を使用した高度なアニメーションの実装手法\n3. アニメーションパフォーマンスの測定と分析\n4. レンダリング最適化テクニック\n\n## 想定視聴者\n・ 複雑なアニメーションの実装に苦戦している開発者\n・ アニメーションのパフォーマンス向上に興味がある開発者","starts_at":"2024-11-21T06:40:00+00:00","ends_at":"2024-11-21T07:20:00+00:00","venue_id":"d6432c3c-3ef9-44ef-aa69-78f5e4dd867d","sponsor_id":null,"is_lightning_talk":false,"created_at":"2024-10-23T15:35:46.200971+00:00","video_url":"https://www.youtube.com/watch?v=gRS1gc1A5VU"},{"id":"6ccbb95b-ddaf-460e-904b-2f91a5ef8d5f","title":"Dart Native Assets で広がる開発の幅","description":"## 概要\nDart や Flutter ではいままで、ビルド時に追加の処理を行う手段がありませんでした。\nしかし最近、 Native Assets と呼ばれる新機能が追加され、ビルド時に追加の処理を行うことが可能になりました。\n本LTでは、 Native Assets とはそもそもどんな機能なのか、どのように活用できるのかをお話しします。\n\n\n## 想定視聴者\nDart/Flutter でアプリやパッケージ開発をする方全般\n特に、FFIを用いた開発をしている方","starts_at":"2024-11-21T09:00:00+00:00","ends_at":"2024-11-21T09:10:00+00:00","venue_id":"f6ee9501-0698-44ea-ad21-eb051ee94a8e","sponsor_id":null,"is_lightning_talk":true,"created_at":"2024-10-23T15:35:46.568367+00:00","video_url":"https://www.youtube.com/watch?v=z1ExeImA2MM"},{"id":"dd12ee26-4d87-4081-a01a-621411231a94","title":"Shorebirdを活用したFlutterアプリの即時アップデート：Code Pushの実践と可能性","description":"本セッションでは、Flutterアプリの「Code Push」（即時コードアップデート）を実現するShorebirdについて深掘りします。Shorebirdを使用することで、FlutterアプリのDartコード部分の更新を、ストア審査なしでエンドユーザーのデバイスに即座に配信できます。\n\nただし、以下の重要な点に注意が必要です：\n- 初回リリースや大幅な変更時は従来通りの審査が必要\n- 更新できるのはDartコードのみ（ネイティブコードは不可）\n- 各アプリストアの規約遵守が必須\n\nこのセッションでは、以下の点に焦点を当てます：\n- Shorebirdの基本概念と仕組み\n- Code Pushの使用方法（ライブデモ含む）\n- CI/CDとの統合\n- 料金体系\n- Shorebirdの利点と課題\n- 実プロジェクトでの経験に基づく知見と教訓\n- アプリストア規約との整合性と法的考慮事項\n\n想定視聴者：\n- 即時アップデートに関心のある開発者\n- Shorebirdを検討中の方\n- 実践的な使用例を知りたい方\n\n複数プロジェクトでのShorebird導入・運用経験を基に、実践的な洞察と具体的なアドバイスを提供します。理論と実践の両面から、Shorebirdの効果的かつ適切な活用方法をお伝えします。技術的側面だけでなく、法的な観点からも安全な利用指針を示します。","starts_at":"2024-11-21T07:40:00+00:00","ends_at":"2024-11-21T08:20:00+00:00","venue_id":"f6ee9501-0698-44ea-ad21-eb051ee94a8e","sponsor_id":null,"is_lightning_talk":false,"created_at":"2024-10-23T15:35:46.645872+00:00","video_url":"https://www.youtube.com/watch?v=iG6ZYrDBuDk"},{"id":"02ab1faa-508e-418e-a682-6443148fba5c","title":"Flutterテスト戦略の再考 〜品質と効率のバランスを求めて〜","description":"## 概要\n皆さんが普段開発を行っているプロダクトにおける品質は、どのように保証していますか？QAエンジニアによる検証や、実装者が書くテストなど、さまざまな手法が存在すると思います。\n\nFlutterのテストは一般的に次の3つの種類に分けられます。\n\n- Unit Test\n- Widget Test\n- Integration Test\n\nこれらのテストはそれぞれ異なる役割を持ち、プロダクトの品質を高めるために重要です。特に、Unit TestやWidget Testに分類されるVRT（Visual Regression Testing）であるGolden Testを一度は耳にしたことがある方も多いのではないでしょうか？\n\nしかし、それらのテストを有効かつ効率的に、そしてメンバーに納得感を持ってもらった状態で導入することは決して容易ではありません。\n\n本セッションでは、以下のポイントについて議論します。\n\n各種テストの役割とその効果的な導入方法\nUI/UXを分けて考えてテストする方法\n小さく始めるためのプラクティス\n\nFlutterプロジェクトにおける品質保証とテスト効率のバランスを最適化するための具体的なアプローチを提供します。\n\n## 想定視聴者\n- テスト戦略について議論がしたい人\n- テストを始めたい、またはすでに導入はできているがあまり効果を実感できていない人","starts_at":"2024-11-21T08:40:00+00:00","ends_at":"2024-11-21T08:50:00+00:00","venue_id":"f6ee9501-0698-44ea-ad21-eb051ee94a8e","sponsor_id":null,"is_lightning_talk":true,"created_at":"2024-10-23T15:35:45.580524+00:00","video_url":"https://www.youtube.com/watch?v=2VBGCfNxqMo"},{"id":"000db4b0-4065-48ed-8925-afea039e2c72","title":"ImpellerとSkiaについて","description":"Impellerについて知っていますか？Skiaに代わる形で導入されたレンダリングエンジンでFlutter v3.7.0でiOSにおいてpreviewが始まり、v3.16.0ではAndroidでもpreviewが開始されました。\n皆さん様々な印象があると思います。有効にしたら動作が速くなった、名前が強そう、シャドウ重くない？などなど...\nとはいえ実際にSkiaからどのように変わり、なぜ速くなったのかを理解してる人はあまり多くないと思います。\nFlutterはありがたいことにOSSでこの魔法のような技術がどう実現されているかを実際に読むことができます。\nこのトークではWidgetTreeから実際に描画されるまでを追いながらSkiaからImpellerでどのように改善されたかを解説していきます。\n\n## 想定視聴者\n- Flutterの内部を知りたい人\n- Flutterに根ざして開発したい人","starts_at":"2024-11-21T04:00:00+00:00","ends_at":"2024-11-21T04:40:00+00:00","venue_id":"d6432c3c-3ef9-44ef-aa69-78f5e4dd867d","sponsor_id":null,"is_lightning_talk":false,"created_at":"2024-10-23T15:35:45.650257+00:00","video_url":"https://www.youtube.com/watch?v=9eGo1IClarw"},{"id":"3bbe9e9a-d41f-4c4d-994c-0064cd30fd94","title":"Monetizing Your Indie Flutter App to $1k in Monthly Revenue and Beyond","description":"## 概要\nOnly ~17% of apps reach $1k in monthly revenue. Learn best practices on crossing $1k MRR and beyond from personal experience building two profitable apps and advice from other successful app founders\n\n## 想定視聴者\nApp developers/founders","starts_at":"2024-11-22T05:30:00+00:00","ends_at":"2024-11-22T06:10:00+00:00","venue_id":"d6432c3c-3ef9-44ef-aa69-78f5e4dd867d","sponsor_id":16,"is_lightning_talk":false,"created_at":"2024-10-23T15:59:45.255258+00:00","video_url":"https://www.youtube.com/watch?v=O_wD6Q_FWV4"},{"id":"ed95a319-5971-4335-b285-390768dc1be7","title":"僕のstate restorationアカデミア","description":"## 概要\n\nユーザーとして、この場面を想像してみてください：アプリAで長文を入力中、何度か他のアプリBに切り替えて使用し、アプリAに戻ったところ、突然すべてのデータが消えてしまいました。OSがアプリAを終了させてしまったのです！それはあまり良くないuxですね。開発者として、どうやってユーザーを挙動不審な行動に対して守ることができますか？実は、state restorationという簡単な解決方法があります。状態管理についてよく話しますが、state restorationのことを忘れることがあります。最新の個人開発アプリ「Japanana」ではこの機能が必要でしたので、実際の例を使ってその実装方法をこの発表で紹介したいと思います。\n\n## 想定視聴者\n\n• State restorationについて理解したい開発者\n• State restorationを実装したく、その方法を学びたい開発者\n• State restorationを実装した後、テスト方法を学びたい開発者","starts_at":"2024-11-21T08:50:00+00:00","ends_at":"2024-11-21T09:00:00+00:00","venue_id":"f6ee9501-0698-44ea-ad21-eb051ee94a8e","sponsor_id":null,"is_lightning_talk":true,"created_at":"2024-10-23T15:35:45.290723+00:00","video_url":"https://www.youtube.com/watch?v=ZEpcXKXSIyI"},{"id":"00af53a6-db85-46b9-a10b-e92a6b1232a4","title":"ネットスーパーがスクリーンリーダーに対応した話 ~あるいはアクセシビリティ向上によるユーザー獲得~","description":"## 概要\n\n令和6年（2024年）4月1日に「改正障害者差別解消法」が施行され、事業者による障害のある方への合理的配慮の提供が義務化されました。ECサイトにおいては誰もが安心してサービスを利用できるように、ウェブアクセシビリティの確保が求められています。\n\nそんななか、私が所属する株式会社10Xで提供している小売チェーン向けECプラットフォームStailerでは視覚障害者の方により便利なネットスーパー・ネットドラッグストア利用体験を提供すべく、スクリーンリーダー（音声読み上げソフト）対応を実施しました。\n\nスクリーンリーダーはFlutterがフレームワークとしてサポートするアクセシビリティ機能の一つでもあります。他にはフォントサイズやコントラストがサポートされています。\n\nこのセッションではFlutterが提供するスクリーンリーダーをサポートする機能について説明するとともに、実際にStailerがスクリーンリーダーに対応した際に困ったことやワークアラウンドの紹介、チームにスクリーンリーダー対応を広めるための活動などをお話します。\n\n参考 https://product.10x.co.jp/entry/2024/07/01/124355\n\n## 想定視聴者\n- アクセシビリティ対応に興味がある方\n- チームの実装方針を決めたり広めたりすることがある方","starts_at":"2024-11-21T02:00:00+00:00","ends_at":"2024-11-21T02:40:00+00:00","venue_id":"f6ee9501-0698-44ea-ad21-eb051ee94a8e","sponsor_id":null,"is_lightning_talk":false,"created_at":"2024-10-23T15:35:45.497072+00:00","video_url":"https://www.youtube.com/watch?v=IXEgISM5-N8"},{"id":"5fa4f6aa-47ef-40d9-b6bb-216493ffc1b1","title":"実践的パッケージ戦略","description":"## 概要\nアプリケーションの機能やレイヤーをディレクトリで分けて表現することは普通に行うことだと思います。\nこのディレクトリの構成を機能単位やレイヤーでパッケージ化します。\n\nパッケージ化すると機能ごとの依存度が減り、意図しない機能を実行する危険性を減らすことができます。\nまた、単一のパッケージのみテストを実行したり、依存度が少ないことで機能を切り離したりすることも比較的容易になります。\n\nただし、レイヤーでパッケージ化する場合はある程度入念な設計が必要になります。\n例えば、 UI から直接通信処理を実行させたくないような場合、単純にパッケージを分割しているだけではファイルをインポートすることで簡単に処理を実行できてしまい、あまりその恩恵を受けることができません。\nこの恩恵を受けるための一つの手法として依存性逆転の原則があります。\n\nここでは、 Riverpod を利用した依存性逆転の原則の実装の説明と melos を利用した依存の解決方法、並列でテストを実行した際のカバレッジの算出など、開発の現場で行った実践的なお話をさせてもらいます。\n\n## 想定視聴者\n- これからサービスを立ち上げる方\n- アプリケーションが大きくなって依存の整理に苦しんでいる方","starts_at":"2024-11-21T05:50:00+00:00","ends_at":"2024-11-21T06:30:00+00:00","venue_id":"f6ee9501-0698-44ea-ad21-eb051ee94a8e","sponsor_id":null,"is_lightning_talk":false,"created_at":"2024-10-23T15:35:45.875048+00:00","video_url":"https://www.youtube.com/watch?v=PVpx24S-PPo"},{"id":"6cda6895-57f8-47dc-ab29-ebcbd9c7f95a","title":"気をつけたい！Desktop対応で陥りやすい罠とその対策","description":"## 概要\nMobile向けに開発したものをWebや他のDesktopプラットフォームで表示すると、「なんか違う？」と感じたことはありませんか？\n本セッションでは、MobileとDesktopをワンソースで開発する中で遭遇した実際の事例を基に、Desktopプラットフォームでの開発時に特に注意が必要なポイントを詳しく解説します。\n\n- MobileとDesktopプラットフォームの違いについての概要\n- プロジェクトで遭遇した具体的な事例の紹介\n- 注意が必要なWidgetと、それぞれの対応策\n- プラットフォームごとの差分を考慮した開発手法の提案\n\n## 想定視聴者\n- MobileアプリをDesktopプラットフォームに展開しようと考えている方\n- Desktopプラットフォームでの開発に興味がある方\n- ワンソースでの複数プラットフォーム対応に挑戦している方\n- Desktopプラットフォームの開発経験が少ない方","starts_at":"2024-11-22T04:30:00+00:00","ends_at":"2024-11-22T05:10:00+00:00","venue_id":"f6ee9501-0698-44ea-ad21-eb051ee94a8e","sponsor_id":null,"is_lightning_talk":false,"created_at":"2024-10-23T15:35:45.952528+00:00","video_url":"https://www.youtube.com/watch?v=GcrbW2RrU3M"},{"id":"c56e7002-02e3-44d5-825c-b64934d12288","title":"Effective Form ~ Flutterによる複雑なフォーム開発の実践 ~","description":"## 概要\n\n「フォーム」を取り扱うアプリの機能実装は、考慮すべき点が多岐に渡り、難易度が非常に高い部分です。\n\n例えば、商品注文や申請作成の入力画面は、単純な入力画面とは性質が異なり、複雑な仕様の中でミスができない実装が求められます。\nそこでは、高度なバリデーションや、複数ソースからの動的なデータ取得・更新など、「複雑なロジックをフロントで実装する必要がある」点で多くの課題が存在します。\n\nFlutterの活用は、開発効率を上げる有効な手段の１つですが、単に導入するだけでは上記課題は解消しきれません。\n本トークでは、複雑度が極めて高いフォーム開発を、宣言的かつ型安全に保つことで、効率的に実現する方法をご紹介します。\n\nトピック\n\n- Flutterでのフォーム画面開発\n  - 実プロダクトの事例紹介\n- 状態管理とバリデーションのアプローチ\n  - 状態設計の手法\n  - Riverpod, flutter_hooksの活用\n  - フォーム要素間の相互依存関係の処理\n  - 複数画面間でのデータ同期の実装\n- ユーザー体験向上の工夫\n  - エラー、アラートのフィードバック\n  - 入力補助\n  - 細かな操作感\n\n## 想定視聴者\n\n- フォーム開発の設計や実装に悩んだことがある方\n- Flutterを使って効率的に複雑なフォームを実装したい方","starts_at":"2024-11-22T08:30:00+00:00","ends_at":"2024-11-22T09:10:00+00:00","venue_id":"f6ee9501-0698-44ea-ad21-eb051ee94a8e","sponsor_id":null,"is_lightning_talk":false,"created_at":"2024-10-23T15:35:46.280365+00:00","video_url":"https://www.youtube.com/watch?v=a4cxyE9zKSE"},{"id":"83897c0b-3a06-48a3-99e8-584195e318ac","title":"Firebase Dynamic Links終了に備える：FlutterアプリでのAdjust導入とディープリンク最適化","description":"## 概要\n2025年8月にFirebase Dynamic Links（FDL）のサービスが終了することが発表され、多くのアプリ開発者がAdjust、AppsFlyer、Bitly、Branch、Kochavaなど代替ソリューションの選定を迫られています。\n\n本セッションでは、実際のプロダクトで行ったFDLからAdjustへの移行作業を通じて、FDLの主要な機能をカバーしつつ、Adjustを用いたディープリンクの設定方法、ディープリンク機能の実装例、分析に不可欠なログの実装方法、およびパーソナライズされたユーザー体験を提供するための戦略とその制約を紹介します。\n\nこれにより、FDL終了後のアプリ開発において、どのようにスムーズな移行を実現し、必要な機能を維持するかについて、明確な指針を提供します。このセッションを通じて、ディープリンク技術がどのようにアプリの成長と成功を支えるかを理解し、実際の開発に役立つ知識を提供します。\n\n## 想定視聴者\n- FDLを利用したプロダクトを運用しており、代替の移行先を検討している方\n- ユーザーエンゲージメントの向上やアプリの成長に関心があり、ディープリンク技術を活用したいと考えている方","starts_at":"2024-11-22T06:30:00+00:00","ends_at":"2024-11-22T07:10:00+00:00","venue_id":"f6ee9501-0698-44ea-ad21-eb051ee94a8e","sponsor_id":null,"is_lightning_talk":false,"created_at":"2024-10-23T15:35:46.351841+00:00","video_url":"https://www.youtube.com/watch?v=9hl9COiE83I"},{"id":"72c94df3-82ee-41ce-8b7f-d575eef2e9d9","title":"Master of Isolate","description":"## 概要\nDartでは、非同期処理と並行処理を効率的に行うためのキーコンポーネントとしてIsolateが提供されています。\n特にFlutterアプリケーションのパフォーマンス向上やレスポンス性の向上において、Isolateの正しい理解と活用は非常に重要です。\n\nこのセッションでは、DartのIsolateの内部動作を深く掘り下げ、どのようにしてメモリを共有せずに並行処理を実現しているのかを解説します。また、実際のアプリケーション開発における典型的な使用例とベストプラクティスを紹介し、皆さんのコード品質を一段階上げる手助けをします。\n\nこのセッションの内容は以下の通りです：\n\n- Isolateの基本概念とFutureとの違い\n- DartにおけるIsolateの内部メカニズム\n- メインIsolateとサブIsolate間の通信方法\n- Isolateを使うべき箇所とそうでない箇所\n\n想定視聴者：\n- DartやFlutterでの非同期処理を深く理解したい方\n- アプリケーションのパフォーマンスを最適化したいFlutter開発者\n- Isolateの使い方に課題を感じている方\n- 並行処理を活用し、スケーラブルなアプリケーションを作りたいエンジニア\n- 実際のIsolateを理解した上で、活用したユースケース","starts_at":"2024-11-21T08:30:00+00:00","ends_at":"2024-11-21T08:40:00+00:00","venue_id":"f6ee9501-0698-44ea-ad21-eb051ee94a8e","sponsor_id":null,"is_lightning_talk":true,"created_at":"2024-10-23T15:35:46.422751+00:00","video_url":"https://www.youtube.com/watch?v=ev9s_O5l-zA"},{"id":"0b5536f2-cde0-4224-b84c-df641daed1cb","title":"SliverAppBarはなぜ変化する？ ~ Sliverを内側から理解する ~","description":"## 概要\nSliverAppBarはスクロールに応じて大きさが変化したり、スクロールを中断時に出現したりするAppBarのWidgetです。\nちょっとリッチなスクロールを実装する際に利用するこのWidget、\nどうしてこのような動きが実現できるのでしょうか？\nSliverAppBarを題材に、FlutterのSliverの中身を深掘りして解説します。\nまた、Flutter 3.24で追加されたPinnedHeaderSliver、SliverResizingHeaderについても、中身を解説します。\n\n具体的には以下の内容について解説します。\n- SliverAppBar の動き\n- Sliverとは\n- Sliverの仕組み\n- SliverAppBarの仕組み\n- PinnedHeaderSliver、SliverResizingHeaderについて\n\nFlutterでのスクロール画面でのエラーに対し、\nCustomScrollView、Sliverの利用はよく採用される解決策です。\n今回の発表を通してSliverへの理解を深めていただき、\n開発力の向上の一助となればと思います。\n\n## 想定視聴者\n\n- Flutterでリッチなスクロール画面を実装したい方\n- Flutterの内部実装に興味のある方\n- Sliverの取り扱いに悩んでいる方","starts_at":"2024-11-22T08:30:00+00:00","ends_at":"2024-11-22T09:10:00+00:00","venue_id":"d6432c3c-3ef9-44ef-aa69-78f5e4dd867d","sponsor_id":null,"is_lightning_talk":false,"created_at":"2024-10-23T15:35:46.495017+00:00","video_url":"https://www.youtube.com/watch?v=wvU6Cu0x7dg"},{"id":"b57f3efd-b31d-4d57-aaa3-f45f1b17f727","title":"出前館アプリにおけるFlutterアプリ設計とそれを支えるCICD環境の進化","description":"## スポンサー名\n株式会社出前館\n\n## 概要\n本セッションでは、出前館アプリにおけるFlutterアプリ設計、そしてそれらを支えるCICD環境について述べます。\n\nセッション前半では出前館アプリのアプリ設計についてお話しします。\n出前館アプリのフォルダ構成やAsset Management、そしてState Managementについてお話しします。\n現在出前館では、提供するすべてのアプリでFlutterを採用しています。それら経験をご紹介しつつ、現在の出前館アプリのアプリ設計についてご紹介いたします。\n\nセッション後半では出前館アプリを支えるCICD環境について述べます。\nアプリ開発においてCICD環境はなくてはならない存在です。出前館アプリでは、これまでCICD環境(bitrise)の導入、React NativeからFlutterへの移行に伴う改修、そして新たなCICD環境(TeamCity)への移行に取り組んできました。\n4年間という短い期間にこれだけの取り組みをしてきたチームは少ないでしょう。セッション後半では、この苦労と葛藤についてご紹介します。\n\n## 想定視聴者\n・Flutterを用いてアプリ開発を行うエンジニア\n・CICD環境の構築やその運用に取り組むエンジニア","starts_at":"2024-11-22T02:00:00+00:00","ends_at":"2024-11-22T02:40:00+00:00","venue_id":"f6ee9501-0698-44ea-ad21-eb051ee94a8e","sponsor_id":18,"is_lightning_talk":false,"created_at":"2024-10-23T15:35:47.037072+00:00","video_url":"https://www.youtube.com/watch?v=oynN52DSw-0"},{"id":"f6931b4e-30db-4a4e-9582-7a54c135b740","title":"Flutterによる効率的なAndroid・iOS・Webアプリケーション開発の事例 - スタディサプリ for SCHOOL","description":"## 概要\n株式会社リクルートが提供するスタディサプリ for SCHOOLは、生徒の進路選択を支援するアプリケーションです。\n勉強したい学問や興味のある仕事を発見する、学校の資料請求やオープンキャンパスを予約するといった、進路を考える際に必要となる機能を提供しています。利用できる環境は、Webアプリケーション、AndroidとiOSのモバイルアプリケーションです。\n\n2024年現在、開発フレームワークとしてFlutterを採用しています。\n初回リリースとなる2020年ではAndroidとiOSともにNative SDKによる開発でしたが、2023年にFlutterで作られたアプリケーションに更新しました。また、2024年にはVue.jsで作られたWebアプリケーションをFlutter Webで更新します。\n\nこのセッションはスタディサプリ for SCHOOLをFlutterでリプレースした事例において、Flutterにより開発効率がどのように向上したかを紹介します。そして、AndroidとiOSだけでなくWebもFlutterで開発することとした狙いと、その過程で得られた教訓を共有します。\n\n## 想定視聴者\n- Flutterによる効率的な開発に関心のある方\n- Flutter Webに関心のある方","starts_at":"2024-11-21T05:50:00+00:00","ends_at":"2024-11-21T06:30:00+00:00","venue_id":"d6432c3c-3ef9-44ef-aa69-78f5e4dd867d","sponsor_id":4,"is_lightning_talk":false,"created_at":"2024-10-23T15:43:06.725172+00:00","video_url":"https://www.youtube.com/watch?v=5I9L05bBv6Q"},{"id":"05b3d592-16e4-4831-b6f4-44870c555dd1","title":"Flutterと難読化","description":"## 概要\nリリースしたアプリのクラッシュ事例を追うべく、Crashlyticsなどのサービスを眺めていると、身に覚えのないスタックトレースを見た経験はありませんか？ Flutter では release buildの場合には、コードが難読化されバイナリに含まれます。\nFlutterはAndroid・iOSをはじめとして多くのプラットフォームで動作させる事ができるフレームワークです。Flutterはどのようにして、多くのプラットフォームをサポートする難読化を実現しているのでしょうか？\n\nこのセッションは、大きく2つの要素から構成されます。\n1つ目は、難読化されたコードに直面したときのトラブルシューティングに焦点を当てたものです。例えば、難読化されたスタックトレースを読む方法や、flutter symbolize の仕組みやオプションについて紹介します。\n2つ目は、Flutter の難読化そのものがどのようにして行われるかについて焦点を当てます。Flutterが難読化を行うステップと各プラットフォームでの実例を紹介しつつどのような難読化が行われるかについて紹介します。\n\n## 想定視聴者\n- 難読化に関連したトラブルシューティングについて知りたい人\n- 難読化そのものについて理解を深めたい人\n- Flutter 特有のマルチプラットフォームでの難読化について知りたい人","starts_at":"2024-11-22T05:30:00+00:00","ends_at":"2024-11-22T06:10:00+00:00","venue_id":"f6ee9501-0698-44ea-ad21-eb051ee94a8e","sponsor_id":null,"is_lightning_talk":false,"created_at":"2024-10-23T15:35:46.725781+00:00","video_url":"https://www.youtube.com/watch?v=x2jMRJe_bSY"},{"id":"71216c8c-fbb0-45e1-a72d-e544b6b712bd","title":"ステートマシンで実現する高品質なFlutterアプリ開発","description":"## 概要\nAPIとの通信は完了したのにローディング表示が消えない、データが存在しない場合の実装が漏れていて表示が崩れる…そんな問題に直面したことはありませんか？\nこのようなバグを減らし、優れたアプリを開発するための状態管理の手法は常に重要な課題とされてきました。\n\nこのセッションでは、チームラボが高品質なアプリ開発を実現するために採用しているステートマシンを用いた状態管理手法を詳しく解説します。\n\nステートマシンについての基本概念から始まり、簡単な画面での例を交え、現在Flutterにおいて主流の状態管理手法であるRiverpodとの比較も行います。 その後、複雑な画面でのステートマシン利用例や、弊社が開発した状態管理パッケージの紹介、ステートマシンを効率的に利用するためのアーキテクチャ、ステートマシンを採用することによって得られる、コーディング以外の利点についても説明します。\n\n## 想定視聴者\n* Flutterにおける状態管理に関心のある方\n* setStateやHooks,Riverpodでの状態管理に課題を感じている方","starts_at":"2024-11-21T04:50:00+00:00","ends_at":"2024-11-21T05:30:00+00:00","venue_id":"f6ee9501-0698-44ea-ad21-eb051ee94a8e","sponsor_id":20,"is_lightning_talk":false,"created_at":"2024-10-23T15:51:14.944577+00:00","video_url":"https://www.youtube.com/watch?v=nfL9ffl8ajs"},{"id":"4072087a-1854-4d45-812e-60beb344ff48","title":"Flutterアプリにおけるユーザー体験の可視化と計測基盤構築","description":"## 概要\nSLI/SLOはSREでよく使われる概念ですが、モバイルアプリ開発にはまだ馴染みが薄いかもしれません。\n私たちのプロダクトでは障害発生率が高く、早期の検知と解消が求められていました。\nそこで、SLI/SLOの概念をモバイルアプリに適用し、ユーザー体験の低下を即時に検知する仕組みを構築しました。\n\nこの仕組みにより、以下の指標をリアルタイムで監視し、即時に対応可能となりました：\n- 失敗率：一定以上のユーザーが機能利用時にエラーが発生したケース\n- キャンセル率：一定以上のユーザーが機能利用時に何らかの理由でキャンセルしたケース\n- 中断率：一定以上のユーザーが機能利用時にアプリを強制終了したケース\n\n現在、この監視システムは40以上の機能に適用されています。\n\nこのセッションでは以下の内容について詳しく解説します：\n1. SLI/SLOの基本概念\n2. 一般的なSLI/SLOとユーザー体験を検知するSLI/SLOの違い\n3. ユーザー行動の計測方法\n4. 計測基盤の構築：工夫と課題\n   - 時系列データのログ計測\n   - 高オブザーバビリティの実現オプション\n5. アラート基盤の構築：工夫と課題\n   - ノイズ最小化の方法\n   - チームにアラートを定着させる方法\n\n## 想定視聴者\n- Flutterアプリ内でのDartを用いた計測基盤構築に興味がある方","starts_at":"2024-11-22T01:10:00+00:00","ends_at":"2024-11-22T01:50:00+00:00","venue_id":"d6432c3c-3ef9-44ef-aa69-78f5e4dd867d","sponsor_id":null,"is_lightning_talk":false,"created_at":"2024-10-23T15:35:45.804363+00:00","video_url":"https://www.youtube.com/watch?v=LX5_9WOWWZs"},{"id":"a1ba9bfd-87c8-47b2-b5af-a50e0c64c300","title":"キャンセルします！処理を","description":"## スポンサー名\n\n株式会社ビットキー\n\n## 概要\n\n処理をキャンセルするというパターンを取り入れると、非同期処理の内容の整理に役立つことがあります。\n時間がかかる処理をタイムアウトさせたり、ユーザーの希望に応じて止めたり、あるいは複数のうち最も早い応答だけを採用するような処理に効果的です。\n結果として不要な処理や通信が抑えられ、あなたのアプリの動きのレベルを一段引き上げることにもつながります。\n\n本セッションでは、 協調的なキャンセルの考え方を `dart:async` の `Timer` を例に紹介したうえで、\nSwift Concurrency や Kotlin Coroutine のキャンセルを、 Method Channel で Flutter の世界に持ち込む方法を解説します。\nさらに、 Riverpod の `.autoDispose` と合わせて、キャンセルをアプリに組み込む方法についてもお話しします。\n\n## 想定視聴者\n\n* タイムアウトの実装方法にお悩みの方\n* ユーザーの「やっぱりやめたい」という思いに応えたい方\n* Flutter から Swift Concurrency や Kotlin Coroutine を扱いたい方","starts_at":"2024-11-21T02:00:00+00:00","ends_at":"2024-11-21T02:40:00+00:00","venue_id":"d6432c3c-3ef9-44ef-aa69-78f5e4dd867d","sponsor_id":17,"is_lightning_talk":false,"created_at":"2024-10-23T15:35:46.876345+00:00","video_url":"https://www.youtube.com/watch?v=beD681HhPjs"},{"id":"e97ebf37-5753-43c9-83ea-2be68e7a4363","title":"Seamless Flutter Native Integration: FFI & Pigeon","description":"## 概要\nThis presentation introduces two tools for bridging Flutter apps with native code: FFI (Foreign Function Interface) and Pigeon. FFI enables direct calls to C/C++ functions, optimizing performance and hardware access. Pigeon streamlines method invocations between Flutter and native platforms (Android/iOS), facilitating better data communication. I’ll demonstrate the implementation and success stories of using these tools to enhance native functionality in Flutter applications.\n\n## 想定視聴者\nAiming to expand knowledge of FFI & Pigeon for native platform integration.","starts_at":"2024-11-22T06:30:00+00:00","ends_at":"2024-11-22T07:10:00+00:00","venue_id":"d6432c3c-3ef9-44ef-aa69-78f5e4dd867d","sponsor_id":null,"is_lightning_talk":false,"created_at":"2024-10-23T15:35:45.126095+00:00","video_url":"https://www.youtube.com/watch?v=ZElSVpyRtAo"},{"id":"61d31fb9-fbc5-4d01-aad5-139e6568db15","title":"体験！マクロ時代のFlutterアプリ開発","description":"## 概要\nDart の新機能であるマクロ（Dart macros）の登場により、Flutter アプリ開発で煩雑だったボイラープレートの問題や build_runner によるコード生成の問題の解決が期待されています。\n\nとはいえマクロはまだまだ試験的に公開されている段階であるために自由に触りづらく、できることを把握してどう活用するかをイメージしづらいのが現状です。サンプルとして話題に上がるマクロも JSON とオブジェクトの変換が簡単になるというもので、Flutter アプリ開発にどれほどのインパクトをもたらす機能なのかをイメージするには力不足です。\n\nこのセッションでは、実際に Flutter アプリ開発で活用することを想定したマクロをいくつか紹介し、実際にコーディングして使ってみることで、マクロ導入後の Flutter アプリ開発がどのように変化するのかを体験します。\n\n来るマクロの正式リリースに備え、マクロの活用方法や作り方、そして適切な距離感を今から考えてみませんか？\n\n## 想定視聴者\n- 2025 年以降も Flutter アプリ開発を続ける予定のすべての開発者\n- マクロを使う方・作る方どちらの目線もカバーした内容です","starts_at":"2024-11-22T02:00:00+00:00","ends_at":"2024-11-22T02:40:00+00:00","venue_id":"d6432c3c-3ef9-44ef-aa69-78f5e4dd867d","sponsor_id":null,"is_lightning_talk":false,"created_at":"2024-10-23T15:35:45.211708+00:00","video_url":"https://www.youtube.com/watch?v=Xitie4TrnPo"},{"id":"b4484026-c80b-48ae-a518-f9c14f04f5a8","title":"Figma Dev Modeで変わる！Flutterの開発体験","description":"## 概要\n2024年に発表されたFigmaの新機能 フォーカスビュー、ステータス管理、etc... これらDev Modeの機能の概要を説明すると共に、ベストプラクティスを共有します。\nFigma Dev Modeの活用がFlutterの開発体験をどれだけ向上されるかをご覧頂きます。\n\nエンジニアとデザイナーが共同で発表するこのトークでは、デザインから実装までの一貫したワークフローをロールプレイング形式でお見せします。\nエンジニアとデザイナーそれぞれの仕事の相互理解に繋がる内容で、一緒にご覧頂くことで組織のコラボレーションを強化することにも繋がるでしょう。\n\n## 想定視聴者\n- Flutterエンジニア\n  デザイナと協業し、Widgetの実装等を行うFlutterエンジニア\n- UI/UXデザイナー、\n  デザインツールとしてFigmaを利用し、Flutter開発者との協業するデザイナー。\n- プロダクトマネージャー\n  デザインと開発のプロセスを効率化し、チームのアウトカムを向上させたいマネージャー","starts_at":"2024-11-21T04:50:00+00:00","ends_at":"2024-11-21T05:30:00+00:00","venue_id":"d6432c3c-3ef9-44ef-aa69-78f5e4dd867d","sponsor_id":null,"is_lightning_talk":false,"created_at":"2024-10-23T15:35:45.727621+00:00","video_url":"https://www.youtube.com/watch?v=qHpcyQy7bYw"},{"id":"e57f61d9-5b8b-49a0-89d1-7e3031e4407a","title":"WasmがFlutter on the Webにもたらす変化","description":"Flutter on the WebがStableになってから３年経ち、さまざまな変化が加えられてきました。\n今年はHTML renderer廃止に関するドキュメントが公開され、今後CanvasとWasmのrendererが主力になっていきます\nWasmサポートによって良くなること、できなくなることをHTML,Canvas rendererと実際に動作を比較していきます。\n\nこのセッションでは、以下の内容についてお話しします：\n1. Wasmとは一体何なのか\n2. Flutter on the WebのWasmサポートで何が変わったのか\n3. Wasmサポートで、できるようになること、できなくなることをHTML,Canvasとの比較\n4. Flutter on the Webの今後\n\n想定視聴者\nFlutter on the WebのWasmサポートで何が変わるか興味がある方","starts_at":"2024-11-22T01:10:00+00:00","ends_at":"2024-11-22T01:50:00+00:00","venue_id":"f6ee9501-0698-44ea-ad21-eb051ee94a8e","sponsor_id":null,"is_lightning_talk":false,"created_at":"2024-10-23T15:35:46.805656+00:00","video_url":"https://www.youtube.com/watch?v=YvWAAlLHg5Q"},{"id":"369e19d9-1f27-40e6-b294-64c6ca9bfcae","title":"マッチングアプリ『Omiai 』のFlutterへのリプレイスの挑戦","description":"## スポンサー名\n株式会社Omiai\n\n## 概要\n株式会社Omiai では、長年運営してきたマッチングアプリ『Omiai 』をFlutterでリプレイスする取り組みを進めています。\n\niOS・Android 両プラットフォームの古いコードベースが抱える技術的負債や仕様の差異などの課題解決を目指し、ゼロからのFlutterプロジェクト始動を機に、様々な改善や工夫に挑戦しています。\n\n本セッションでは、以下の取り組みを中心に、OmiaiのFlutterリプレイスについて紹介します。\n\n• マルチパッケージ構成を活用し、依存の向きを厳密に管理したアーキテクチャ\n• 業務ロジック層およびそれより抽象的な層のユニットテストをカバレッジ100%で記述する運用\n• public_member_api_docsの全面適用など、採用しているlintルールやcustom_lint\n• Flutter経験のないエンジニアができるだけスムーズに開発に参画できるキャッチアップ方法\n• マージとデプロイのタイミングを分離したブランチ運用とリリースフロー\n• Add-to-Appによる段階的なリプレイス\n\n## 想定視聴者\n• Flutter プロジェクトをこれから立ち上げる方\n• 既存プロジェクトの開発生産性や保守性に課題を感じている方\n• アーキテクチャ設計、テスト戦略、チーム育成などの知見を得たい方","starts_at":"2024-11-22T07:30:00+00:00","ends_at":"2024-11-22T08:10:00+00:00","venue_id":"f6ee9501-0698-44ea-ad21-eb051ee94a8e","sponsor_id":21,"is_lightning_talk":false,"created_at":"2024-10-23T15:35:46.950989+00:00","video_url":"https://www.youtube.com/watch?v=-G4bqRTlrhA"}]''';

const _jsonContentV3 =
    r'''[{"id":"d6432c3c-3ef9-44ef-aa69-78f5e4dd867d","name":"A Dash","sessions":[{"id":"0b5536f2-cde0-4224-b84c-df641daed1cb","title":"SliverAppBarはなぜ変化する？ ~ Sliverを内側から理解する ~","description":"## 概要\nSliverAppBarはスクロールに応じて大きさが変化したり、スクロールを中断時に出現したりするAppBarのWidgetです。\nちょっとリッチなスクロールを実装する際に利用するこのWidget、\nどうしてこのような動きが実現できるのでしょうか？\nSliverAppBarを題材に、FlutterのSliverの中身を深掘りして解説します。\nまた、Flutter 3.24で追加されたPinnedHeaderSliver、SliverResizingHeaderについても、中身を解説します。\n\n具体的には以下の内容について解説します。\n- SliverAppBar の動き\n- Sliverとは\n- Sliverの仕組み\n- SliverAppBarの仕組み\n- PinnedHeaderSliver、SliverResizingHeaderについて\n\nFlutterでのスクロール画面でのエラーに対し、\nCustomScrollView、Sliverの利用はよく採用される解決策です。\n今回の発表を通してSliverへの理解を深めていただき、\n開発力の向上の一助となればと思います。\n\n## 想定視聴者\n\n- Flutterでリッチなスクロール画面を実装したい方\n- Flutterの内部実装に興味のある方\n- Sliverの取り扱いに悩んでいる方","starts_at":"2024-11-22T08:30:00+00:00","ends_at":"2024-11-22T09:10:00+00:00","is_lightning_talk":false,"speakers":[{"id":"677f3a6c-587e-4fcc-a11a-37e13d795df9","name":"Aoi Umigishi","avatar_name":"677f3a6c-587e-4fcc-a11a-37e13d795df9.webp","x_id":"Aoi_Umigishi"}],"sponsors":[]},{"id":"3bbe9e9a-d41f-4c4d-994c-0064cd30fd94","title":"Monetizing Your Indie Flutter App to $1k in Monthly Revenue and Beyond","description":"## 概要\nOnly ~17% of apps reach $1k in monthly revenue. Learn best practices on crossing $1k MRR and beyond from personal experience building two profitable apps and advice from other successful app founders\n\n## 想定視聴者\nApp developers/founders","starts_at":"2024-11-22T05:30:00+00:00","ends_at":"2024-11-22T06:10:00+00:00","is_lightning_talk":false,"speakers":[{"id":"e34f0e48-bc98-4621-9fd8-97fab8e4f112","name":"Jeffrey Bunn","avatar_name":"e34f0e48-bc98-4621-9fd8-97fab8e4f112.webp","x_id":"jeffreybunn"}],"sponsors":[{"id":16,"name":"RevenueCat","logo_name":"0458e1bc-5ed3-4d9c-9248-e28e3eba2d41.webp","description":"RevenueCatは、サブスクアプリの収益化を支援する包括的なプラットフォームです。企業はRevenueCatを利用して、アプリ内課金の管理、サブスクリプションの追跡、収益分析を一元化できます。シームレスな統合と強力な分析ツールを提供することで、収益の最大化をサポートし、継続的な成長を促進します。Notion、Photoroom、ZOZOなど3万2千を超えるアプリで採用され、サブスクビジネス成功に必要な柔軟なソリューションを提供しています。","url":"https://www.revenuecat.com/jp/","type":"platinum","sort_id":3}]},{"id":"f6931b4e-30db-4a4e-9582-7a54c135b740","title":"Flutterによる効率的なAndroid・iOS・Webアプリケーション開発の事例 - スタディサプリ for SCHOOL","description":"## 概要\n株式会社リクルートが提供するスタディサプリ for SCHOOLは、生徒の進路選択を支援するアプリケーションです。\n勉強したい学問や興味のある仕事を発見する、学校の資料請求やオープンキャンパスを予約するといった、進路を考える際に必要となる機能を提供しています。利用できる環境は、Webアプリケーション、AndroidとiOSのモバイルアプリケーションです。\n\n2024年現在、開発フレームワークとしてFlutterを採用しています。\n初回リリースとなる2020年ではAndroidとiOSともにNative SDKによる開発でしたが、2023年にFlutterで作られたアプリケーションに更新しました。また、2024年にはVue.jsで作られたWebアプリケーションをFlutter Webで更新します。\n\nこのセッションはスタディサプリ for SCHOOLをFlutterでリプレースした事例において、Flutterにより開発効率がどのように向上したかを紹介します。そして、AndroidとiOSだけでなくWebもFlutterで開発することとした狙いと、その過程で得られた教訓を共有します。\n\n## 想定視聴者\n- Flutterによる効率的な開発に関心のある方\n- Flutter Webに関心のある方","starts_at":"2024-11-21T05:50:00+00:00","ends_at":"2024-11-21T06:30:00+00:00","is_lightning_talk":false,"speakers":[{"id":"0116ff6a-5171-44d3-9733-f047f2f17930","name":"若宮浩司","avatar_name":"0116ff6a-5171-44d3-9733-f047f2f17930.webp","x_id":"D_R_1009"}],"sponsors":[{"id":4,"name":"株式会社リクルート","logo_name":"2f556387-3f38-4635-b4f0-aef28efd5d67.webp","description":"私たちは、個人と企業をつなぎ、より多くの選択肢を提供することで、「まだ、ここにない、出会い。」を実現してきました。いつでもどこでも情報を得られるようになった今だからこそ、より最適な選択肢を提案することで、「まだ、ここにない、出会い。」を、桁違いに速く、驚くほどシンプルに、もっと身近にしていきたいと考えています。","url":"https://www.recruit.co.jp/employment/","type":"gold","sort_id":7}]},{"id":"4156b633-8043-4d94-8da8-39c367088c59","title":"アニメーションを最深まで理解してパフォーマンスを向上させる","description":"## 概要\nFlutter でのアニメーション実装は、簡易に実装できてアプリの魅力を向上させる重要な機能ですが、複雑なアニメーションや大規模なアプリケーションでは、パフォーマンスの問題に直面することがあります。\n複雑なアニメーションを実装する際、フレームレートの低下やメモリ使用量の増加など、パフォーマンスの低下が課題となっています。また、アニメーションの最適化手法や、適切なタイミングでの RepaintBoundary の使用など、開発者が理解すべき点が多岐にわたります。\n本セッションでは、 Flutter のアニメーションを深く理解し、パフォーマンスを向上させるための実践的な手法を紹介します。 Flow を活用した複雑なアニメーションの実装、アニメーションのパフォーマンス最適化テクニック、そしてレンダリングを最小限に抑えるための tips について詳しく解説します。\n1. Flutter アニメーションの基本概念と内部実装を理解する\n2. Flow を使用した高度なアニメーションの実装手法\n3. アニメーションパフォーマンスの測定と分析\n4. レンダリング最適化テクニック\n\n## 想定視聴者\n・ 複雑なアニメーションの実装に苦戦している開発者\n・ アニメーションのパフォーマンス向上に興味がある開発者","starts_at":"2024-11-21T06:40:00+00:00","ends_at":"2024-11-21T07:20:00+00:00","is_lightning_talk":false,"speakers":[{"id":"bda5c5dd-2c44-49da-afa6-cd6560725064","name":"みね","avatar_name":"bda5c5dd-2c44-49da-afa6-cd6560725064.webp","x_id":"nihon_kaizou"}],"sponsors":[]},{"id":"83119f09-e90c-468b-9a5e-69d2df646dfb","title":"DevTools Extensions で独自の DevTool を開発する","description":"## 概要\nFlutter におけるアプリ開発において、 DevTools は必要不可欠な存在です。\nしかし既存の DevTools に独自の機能をカスタマイズできることはあまり知られていません。\nDevTools を独自にカスタマイズすることで、ログの表示制御、キャッシュの表示、アプリ内の開発者用の画面を DevTools に移行するなど、開発体験の向上が見込めます。\n\nこのセクションでは、devtools_extensions パッケージを使用して、 DevTools を独自にカスタマイズする方法や、\n実際のチーム開発でどのような機能をカスタマイズしているかなどの実例を紹介します。\n加えてパッケージ製作者向けに自身のパッケージに DevTools Extensions を提供する方法も解説します。\n\n## 想定視聴者\n- DevTools の開発に興味のある方\n- チーム開発の生産性を上げたい方\n- アプリ内の開発用画面を DevTools に移行させたい方","starts_at":"2024-11-22T07:30:00+00:00","ends_at":"2024-11-22T08:10:00+00:00","is_lightning_talk":false,"speakers":[{"id":"67bfcf7a-da80-4603-81ee-cefe1240fbca","name":"Koki Yoshida","avatar_name":"67bfcf7a-da80-4603-81ee-cefe1240fbca.webp","x_id":"koki8442"}],"sponsors":[]},{"id":"4072087a-1854-4d45-812e-60beb344ff48","title":"Flutterアプリにおけるユーザー体験の可視化と計測基盤構築","description":"## 概要\nSLI/SLOはSREでよく使われる概念ですが、モバイルアプリ開発にはまだ馴染みが薄いかもしれません。\n私たちのプロダクトでは障害発生率が高く、早期の検知と解消が求められていました。\nそこで、SLI/SLOの概念をモバイルアプリに適用し、ユーザー体験の低下を即時に検知する仕組みを構築しました。\n\nこの仕組みにより、以下の指標をリアルタイムで監視し、即時に対応可能となりました：\n- 失敗率：一定以上のユーザーが機能利用時にエラーが発生したケース\n- キャンセル率：一定以上のユーザーが機能利用時に何らかの理由でキャンセルしたケース\n- 中断率：一定以上のユーザーが機能利用時にアプリを強制終了したケース\n\n現在、この監視システムは40以上の機能に適用されています。\n\nこのセッションでは以下の内容について詳しく解説します：\n1. SLI/SLOの基本概念\n2. 一般的なSLI/SLOとユーザー体験を検知するSLI/SLOの違い\n3. ユーザー行動の計測方法\n4. 計測基盤の構築：工夫と課題\n   - 時系列データのログ計測\n   - 高オブザーバビリティの実現オプション\n5. アラート基盤の構築：工夫と課題\n   - ノイズ最小化の方法\n   - チームにアラートを定着させる方法\n\n## 想定視聴者\n- Flutterアプリ内でのDartを用いた計測基盤構築に興味がある方","starts_at":"2024-11-22T01:10:00+00:00","ends_at":"2024-11-22T01:50:00+00:00","is_lightning_talk":false,"speakers":[{"id":"932e6952-87e2-4820-8084-128d69a3536a","name":"おさたく","avatar_name":"932e6952-87e2-4820-8084-128d69a3536a.webp","x_id":"ostk0069"}],"sponsors":[]},{"id":"a1ba9bfd-87c8-47b2-b5af-a50e0c64c300","title":"キャンセルします！処理を","description":"## スポンサー名\n\n株式会社ビットキー\n\n## 概要\n\n処理をキャンセルするというパターンを取り入れると、非同期処理の内容の整理に役立つことがあります。\n時間がかかる処理をタイムアウトさせたり、ユーザーの希望に応じて止めたり、あるいは複数のうち最も早い応答だけを採用するような処理に効果的です。\n結果として不要な処理や通信が抑えられ、あなたのアプリの動きのレベルを一段引き上げることにもつながります。\n\n本セッションでは、 協調的なキャンセルの考え方を `dart:async` の `Timer` を例に紹介したうえで、\nSwift Concurrency や Kotlin Coroutine のキャンセルを、 Method Channel で Flutter の世界に持ち込む方法を解説します。\nさらに、 Riverpod の `.autoDispose` と合わせて、キャンセルをアプリに組み込む方法についてもお話しします。\n\n## 想定視聴者\n\n* タイムアウトの実装方法にお悩みの方\n* ユーザーの「やっぱりやめたい」という思いに応えたい方\n* Flutter から Swift Concurrency や Kotlin Coroutine を扱いたい方","starts_at":"2024-11-21T02:00:00+00:00","ends_at":"2024-11-21T02:40:00+00:00","is_lightning_talk":false,"speakers":[{"id":"5d252897-2c14-4232-b51d-8f9bfa47fae3","name":"Masatoshi Tsushima","avatar_name":"5d252897-2c14-4232-b51d-8f9bfa47fae3.webp","x_id":"utisam"}],"sponsors":[{"id":17,"name":"株式会社ビットキー","logo_name":"42723fb3-273a-413c-893f-89bb9c99eea5.webp","description":"ビットキーは、独自開発のデジタルコネクトプラットフォームを通して、人と「暮らし」や「仕事」の間にある分断を解消するアプリ/SaaSを開発しています。 あらゆるサービスやモノを柔軟につなげることで、体験のアップデートを進めています。","url":"https://bitkey.co.jp/","type":"gold","sort_id":8}]},{"id":"e97ebf37-5753-43c9-83ea-2be68e7a4363","title":"Seamless Flutter Native Integration: FFI & Pigeon","description":"## 概要\nThis presentation introduces two tools for bridging Flutter apps with native code: FFI (Foreign Function Interface) and Pigeon. FFI enables direct calls to C/C++ functions, optimizing performance and hardware access. Pigeon streamlines method invocations between Flutter and native platforms (Android/iOS), facilitating better data communication. I’ll demonstrate the implementation and success stories of using these tools to enhance native functionality in Flutter applications.\n\n## 想定視聴者\nAiming to expand knowledge of FFI & Pigeon for native platform integration.","starts_at":"2024-11-22T06:30:00+00:00","ends_at":"2024-11-22T07:10:00+00:00","is_lightning_talk":false,"speakers":[{"id":"0b712b58-02e9-4ed1-a51d-7da03fc67457","name":"Dreamwalker","avatar_name":"0b712b58-02e9-4ed1-a51d-7da03fc67457.webp","x_id":"jaichangpark"}],"sponsors":[]},{"id":"61d31fb9-fbc5-4d01-aad5-139e6568db15","title":"体験！マクロ時代のFlutterアプリ開発","description":"## 概要\nDart の新機能であるマクロ（Dart macros）の登場により、Flutter アプリ開発で煩雑だったボイラープレートの問題や build_runner によるコード生成の問題の解決が期待されています。\n\nとはいえマクロはまだまだ試験的に公開されている段階であるために自由に触りづらく、できることを把握してどう活用するかをイメージしづらいのが現状です。サンプルとして話題に上がるマクロも JSON とオブジェクトの変換が簡単になるというもので、Flutter アプリ開発にどれほどのインパクトをもたらす機能なのかをイメージするには力不足です。\n\nこのセッションでは、実際に Flutter アプリ開発で活用することを想定したマクロをいくつか紹介し、実際にコーディングして使ってみることで、マクロ導入後の Flutter アプリ開発がどのように変化するのかを体験します。\n\n来るマクロの正式リリースに備え、マクロの活用方法や作り方、そして適切な距離感を今から考えてみませんか？\n\n## 想定視聴者\n- 2025 年以降も Flutter アプリ開発を続ける予定のすべての開発者\n- マクロを使う方・作る方どちらの目線もカバーした内容です","starts_at":"2024-11-22T02:00:00+00:00","ends_at":"2024-11-22T02:40:00+00:00","is_lightning_talk":false,"speakers":[{"id":"a7dc0952-73c1-4e4a-a50a-aa6d553369ae","name":"ちゅーやん","avatar_name":"a7dc0952-73c1-4e4a-a50a-aa6d553369ae.webp","x_id":"chooyan_i18n"}],"sponsors":[]},{"id":"b4484026-c80b-48ae-a518-f9c14f04f5a8","title":"Figma Dev Modeで変わる！Flutterの開発体験","description":"## 概要\n2024年に発表されたFigmaの新機能 フォーカスビュー、ステータス管理、etc... これらDev Modeの機能の概要を説明すると共に、ベストプラクティスを共有します。\nFigma Dev Modeの活用がFlutterの開発体験をどれだけ向上されるかをご覧頂きます。\n\nエンジニアとデザイナーが共同で発表するこのトークでは、デザインから実装までの一貫したワークフローをロールプレイング形式でお見せします。\nエンジニアとデザイナーそれぞれの仕事の相互理解に繋がる内容で、一緒にご覧頂くことで組織のコラボレーションを強化することにも繋がるでしょう。\n\n## 想定視聴者\n- Flutterエンジニア\n  デザイナと協業し、Widgetの実装等を行うFlutterエンジニア\n- UI/UXデザイナー、\n  デザインツールとしてFigmaを利用し、Flutter開発者との協業するデザイナー。\n- プロダクトマネージャー\n  デザインと開発のプロセスを効率化し、チームのアウトカムを向上させたいマネージャー","starts_at":"2024-11-21T04:50:00+00:00","ends_at":"2024-11-21T05:30:00+00:00","is_lightning_talk":false,"speakers":[{"id":"e086a7c1-4cc8-4c48-a58c-391ebe97e385","name":"よーたん","avatar_name":"e086a7c1-4cc8-4c48-a58c-391ebe97e385.webp","x_id":"yohta_watanave"},{"id":"a5efe6e5-0e8d-4720-aceb-27c105115772","name":"ゆめみ","avatar_name":"a5efe6e5-0e8d-4720-aceb-27c105115772.webp","x_id":null}],"sponsors":[]},{"id":"000db4b0-4065-48ed-8925-afea039e2c72","title":"ImpellerとSkiaについて","description":"Impellerについて知っていますか？Skiaに代わる形で導入されたレンダリングエンジンでFlutter v3.7.0でiOSにおいてpreviewが始まり、v3.16.0ではAndroidでもpreviewが開始されました。\n皆さん様々な印象があると思います。有効にしたら動作が速くなった、名前が強そう、シャドウ重くない？などなど...\nとはいえ実際にSkiaからどのように変わり、なぜ速くなったのかを理解してる人はあまり多くないと思います。\nFlutterはありがたいことにOSSでこの魔法のような技術がどう実現されているかを実際に読むことができます。\nこのトークではWidgetTreeから実際に描画されるまでを追いながらSkiaからImpellerでどのように改善されたかを解説していきます。\n\n## 想定視聴者\n- Flutterの内部を知りたい人\n- Flutterに根ざして開発したい人","starts_at":"2024-11-21T04:00:00+00:00","ends_at":"2024-11-21T04:40:00+00:00","is_lightning_talk":false,"speakers":[{"id":"3f53ad5d-788f-48ae-838f-9924ed43139f","name":"mori","avatar_name":"3f53ad5d-788f-48ae-838f-9924ed43139f.webp","x_id":"EXCode013"}],"sponsors":[]},{"id":"18ffaf08-03ac-4284-95cf-bd217dbccd69","title":"OS 標準のデザインシステムを超えて - より柔軟な Flutter テーマ管理","description":"## 概要\nFlutter SDK は、Google の Material Design と Apple の Human Interface Guidelines に準拠したテーマ (Material Theme, Cupertino Theme) と関連 API を提供しており、これにより OS 標準のデザインに沿ったアプリ開発が容易になります。\nしかし、独自のデザインシステムを採用したい場合にテーマ管理が複雑化したり、OS 標準のデザインシステムアップデートに伴う破壊的変更により開発コストが増大したりする可能性があります。\n\n本セッションでは、Flutter のテーマと各 Widget のスタイルの関係性を掘り下げ、OS 標準のデザインシステムへの依存を軽減するテーマ管理のアプローチを発表します。\nこれにより、独自のデザインシステムの実現や、OS 標準のデザインシステムアップデートの影響を最小限に抑えることを目指します。\n加えて、Flutter Roadmap でも触れられている blankcanvas の最新動向についても解説します。\n\n## 想定視聴者\n- 独自のデザインシステムを Flutter アプリに適用したいと考えている開発者\n- Flutter のテーマ管理をより深く理解し、効率的な開発手法を学びたい開発者","starts_at":"2024-11-22T04:30:00+00:00","ends_at":"2024-11-22T05:10:00+00:00","is_lightning_talk":false,"speakers":[{"id":"651bd8da-0d3d-45f3-8e5c-eab1af10d8ad","name":"ronnnnn","avatar_name":"651bd8da-0d3d-45f3-8e5c-eab1af10d8ad.webp","x_id":"ronnnnn_jp"}],"sponsors":[]}]},{"id":"f6ee9501-0698-44ea-ad21-eb051ee94a8e","name":"B Dash","sessions":[{"id":"72c94df3-82ee-41ce-8b7f-d575eef2e9d9","title":"Master of Isolate","description":"## 概要\nDartでは、非同期処理と並行処理を効率的に行うためのキーコンポーネントとしてIsolateが提供されています。\n特にFlutterアプリケーションのパフォーマンス向上やレスポンス性の向上において、Isolateの正しい理解と活用は非常に重要です。\n\nこのセッションでは、DartのIsolateの内部動作を深く掘り下げ、どのようにしてメモリを共有せずに並行処理を実現しているのかを解説します。また、実際のアプリケーション開発における典型的な使用例とベストプラクティスを紹介し、皆さんのコード品質を一段階上げる手助けをします。\n\nこのセッションの内容は以下の通りです：\n\n- Isolateの基本概念とFutureとの違い\n- DartにおけるIsolateの内部メカニズム\n- メインIsolateとサブIsolate間の通信方法\n- Isolateを使うべき箇所とそうでない箇所\n\n想定視聴者：\n- DartやFlutterでの非同期処理を深く理解したい方\n- アプリケーションのパフォーマンスを最適化したいFlutter開発者\n- Isolateの使い方に課題を感じている方\n- 並行処理を活用し、スケーラブルなアプリケーションを作りたいエンジニア\n- 実際のIsolateを理解した上で、活用したユースケース","starts_at":"2024-11-21T08:30:00+00:00","ends_at":"2024-11-21T08:40:00+00:00","is_lightning_talk":true,"speakers":[{"id":"4ede673b-d9bb-4d1d-bb1f-cebc6e23b998","name":"新垣清奈","avatar_name":"4ede673b-d9bb-4d1d-bb1f-cebc6e23b998.webp","x_id":null}],"sponsors":[]},{"id":"b57f3efd-b31d-4d57-aaa3-f45f1b17f727","title":"出前館アプリにおけるFlutterアプリ設計とそれを支えるCICD環境の進化","description":"## スポンサー名\n株式会社出前館\n\n## 概要\n本セッションでは、出前館アプリにおけるFlutterアプリ設計、そしてそれらを支えるCICD環境について述べます。\n\nセッション前半では出前館アプリのアプリ設計についてお話しします。\n出前館アプリのフォルダ構成やAsset Management、そしてState Managementについてお話しします。\n現在出前館では、提供するすべてのアプリでFlutterを採用しています。それら経験をご紹介しつつ、現在の出前館アプリのアプリ設計についてご紹介いたします。\n\nセッション後半では出前館アプリを支えるCICD環境について述べます。\nアプリ開発においてCICD環境はなくてはならない存在です。出前館アプリでは、これまでCICD環境(bitrise)の導入、React NativeからFlutterへの移行に伴う改修、そして新たなCICD環境(TeamCity)への移行に取り組んできました。\n4年間という短い期間にこれだけの取り組みをしてきたチームは少ないでしょう。セッション後半では、この苦労と葛藤についてご紹介します。\n\n## 想定視聴者\n・Flutterを用いてアプリ開発を行うエンジニア\n・CICD環境の構築やその運用に取り組むエンジニア","starts_at":"2024-11-22T02:00:00+00:00","ends_at":"2024-11-22T02:40:00+00:00","is_lightning_talk":false,"speakers":[{"id":"cefa50ab-4d04-4cf1-a3f9-9ee50e2b630b","name":"廣部貴徳","avatar_name":"cefa50ab-4d04-4cf1-a3f9-9ee50e2b630b.webp","x_id":"taka1068"}],"sponsors":[{"id":18,"name":"株式会社出前館","logo_name":"2a4cbb69-3500-475a-bfc2-980782f619bb.webp","description":"出前館はクイックコマースサービスとして領域を拡大し、当社のコーポレートミッション「テクノロジーで時間価値を高める」に基づき、利用いただいた皆さまに対して“時間価値の最大化“を実現していきたいと考えています。\n地域活性化とともに、少子高齢化や買い物難民の増加をはじめとした地域や社会課題の解決に向き合い、社会にとって不可欠なライフインフラとして日本経済の発展に貢献できるサービスを目指して挑戦を続けています。","url":"https://recruit.demae-can.co.jp/","type":"platinum","sort_id":2}]},{"id":"05b3d592-16e4-4831-b6f4-44870c555dd1","title":"Flutterと難読化","description":"## 概要\nリリースしたアプリのクラッシュ事例を追うべく、Crashlyticsなどのサービスを眺めていると、身に覚えのないスタックトレースを見た経験はありませんか？ Flutter では release buildの場合には、コードが難読化されバイナリに含まれます。\nFlutterはAndroid・iOSをはじめとして多くのプラットフォームで動作させる事ができるフレームワークです。Flutterはどのようにして、多くのプラットフォームをサポートする難読化を実現しているのでしょうか？\n\nこのセッションは、大きく2つの要素から構成されます。\n1つ目は、難読化されたコードに直面したときのトラブルシューティングに焦点を当てたものです。例えば、難読化されたスタックトレースを読む方法や、flutter symbolize の仕組みやオプションについて紹介します。\n2つ目は、Flutter の難読化そのものがどのようにして行われるかについて焦点を当てます。Flutterが難読化を行うステップと各プラットフォームでの実例を紹介しつつどのような難読化が行われるかについて紹介します。\n\n## 想定視聴者\n- 難読化に関連したトラブルシューティングについて知りたい人\n- 難読化そのものについて理解を深めたい人\n- Flutter 特有のマルチプラットフォームでの難読化について知りたい人","starts_at":"2024-11-22T05:30:00+00:00","ends_at":"2024-11-22T06:10:00+00:00","is_lightning_talk":false,"speakers":[{"id":"36a674f9-b098-4aeb-8dcf-26ecdca334e4","name":"chigichan24","avatar_name":"36a674f9-b098-4aeb-8dcf-26ecdca334e4.webp","x_id":"chigichan24"}],"sponsors":[]},{"id":"71216c8c-fbb0-45e1-a72d-e544b6b712bd","title":"ステートマシンで実現する高品質なFlutterアプリ開発","description":"## 概要\nAPIとの通信は完了したのにローディング表示が消えない、データが存在しない場合の実装が漏れていて表示が崩れる…そんな問題に直面したことはありませんか？\nこのようなバグを減らし、優れたアプリを開発するための状態管理の手法は常に重要な課題とされてきました。\n\nこのセッションでは、チームラボが高品質なアプリ開発を実現するために採用しているステートマシンを用いた状態管理手法を詳しく解説します。\n\nステートマシンについての基本概念から始まり、簡単な画面での例を交え、現在Flutterにおいて主流の状態管理手法であるRiverpodとの比較も行います。 その後、複雑な画面でのステートマシン利用例や、弊社が開発した状態管理パッケージの紹介、ステートマシンを効率的に利用するためのアーキテクチャ、ステートマシンを採用することによって得られる、コーディング以外の利点についても説明します。\n\n## 想定視聴者\n* Flutterにおける状態管理に関心のある方\n* setStateやHooks,Riverpodでの状態管理に課題を感じている方","starts_at":"2024-11-21T04:50:00+00:00","ends_at":"2024-11-21T05:30:00+00:00","is_lightning_talk":false,"speakers":[{"id":"a87ad2ac-dc69-44fb-861d-ef57f3a3f41b","name":"そた","avatar_name":"a87ad2ac-dc69-44fb-861d-ef57f3a3f41b.webp","x_id":"_sotaatos"}],"sponsors":[{"id":20,"name":"チームラボ株式会社","logo_name":"dc3c5be6-a166-4ef0-ac82-ba7d18120ad1.webp","description":"最新のテクノロジーを活用したソリューション、大規模なシステム開発や、プロダクト、デジタルコンテンツの制作、都市計画や建築空間設計などを行う。\nアーティスト、プログラマ、エンジニア、デザイナー、CGアニメーター、数学者、建築家など、デジタル社会の様々な分野のスペシャリスト総勢1000名から構成されているウルトラテクノロジスト集団で、アート、サイエンス、テクノロジー、クリエイティビティの境界を越えて、集団的創造をコンセプトに活動している。","url":"https://www.team-lab.com/","type":"gold","sort_id":5}]},{"id":"e57f61d9-5b8b-49a0-89d1-7e3031e4407a","title":"WasmがFlutter on the Webにもたらす変化","description":"Flutter on the WebがStableになってから３年経ち、さまざまな変化が加えられてきました。\n今年はHTML renderer廃止に関するドキュメントが公開され、今後CanvasとWasmのrendererが主力になっていきます\nWasmサポートによって良くなること、できなくなることをHTML,Canvas rendererと実際に動作を比較していきます。\n\nこのセッションでは、以下の内容についてお話しします：\n1. Wasmとは一体何なのか\n2. Flutter on the WebのWasmサポートで何が変わったのか\n3. Wasmサポートで、できるようになること、できなくなることをHTML,Canvasとの比較\n4. Flutter on the Webの今後\n\n想定視聴者\nFlutter on the WebのWasmサポートで何が変わるか興味がある方","starts_at":"2024-11-22T01:10:00+00:00","ends_at":"2024-11-22T01:50:00+00:00","is_lightning_talk":false,"speakers":[{"id":"8443ba6e-8169-4e7e-8aee-6d200a58a5a5","name":"akaboshinit","avatar_name":"8443ba6e-8169-4e7e-8aee-6d200a58a5a5.webp","x_id":"akaboshinit"}],"sponsors":[]},{"id":"369e19d9-1f27-40e6-b294-64c6ca9bfcae","title":"マッチングアプリ『Omiai 』のFlutterへのリプレイスの挑戦","description":"## スポンサー名\n株式会社Omiai\n\n## 概要\n株式会社Omiai では、長年運営してきたマッチングアプリ『Omiai 』をFlutterでリプレイスする取り組みを進めています。\n\niOS・Android 両プラットフォームの古いコードベースが抱える技術的負債や仕様の差異などの課題解決を目指し、ゼロからのFlutterプロジェクト始動を機に、様々な改善や工夫に挑戦しています。\n\n本セッションでは、以下の取り組みを中心に、OmiaiのFlutterリプレイスについて紹介します。\n\n• マルチパッケージ構成を活用し、依存の向きを厳密に管理したアーキテクチャ\n• 業務ロジック層およびそれより抽象的な層のユニットテストをカバレッジ100%で記述する運用\n• public_member_api_docsの全面適用など、採用しているlintルールやcustom_lint\n• Flutter経験のないエンジニアができるだけスムーズに開発に参画できるキャッチアップ方法\n• マージとデプロイのタイミングを分離したブランチ運用とリリースフロー\n• Add-to-Appによる段階的なリプレイス\n\n## 想定視聴者\n• Flutter プロジェクトをこれから立ち上げる方\n• 既存プロジェクトの開発生産性や保守性に課題を感じている方\n• アーキテクチャ設計、テスト戦略、チーム育成などの知見を得たい方","starts_at":"2024-11-22T07:30:00+00:00","ends_at":"2024-11-22T08:10:00+00:00","is_lightning_talk":false,"speakers":[{"id":"e63e4871-1e52-41f5-845c-335a0ec77e66","name":"Kosuke Saigusa","avatar_name":"e63e4871-1e52-41f5-845c-335a0ec77e66.webp","x_id":"KosukeSaigusa"}],"sponsors":[{"id":21,"name":"株式会社Omiai","logo_name":"02ad860c-e534-44ad-80ad-8395e5304b9f.webp","description":"Omiaiは、累計1000万ユーザーが利用するプロダクトであり、「結婚を見据えた真面目な出会い」をコンセプトに30代のユーザーを中心に利用されています。\n\n社会影響としては、年間約6万人以上がOmiaiで出会い、その後多数がご結婚され、結婚数や少子化対策にも貢献している状況です。行政との提携も複数あります。\n\nエンジニアリングにおいては、新機能開発、新技術導入や改善を常時走らせており、チャレンジも多いです。チャレンジが多いからこそ、開発に集中しやすい環境を大切にしています。","url":"https://enito.co.jp/","type":"gold","sort_id":10}]},{"id":"454605d6-b1b5-40f4-85c6-1636a6c32b1a","title":"Flutterアプリで可用性を向上させたFeatureFlagの運用戦略とその方法","description":"## 概要\nWINTICKETアプリは2021年からトランクベース開発をFeatureFlagを取り入れながら行ってきました。\n大規模が故に常に10数個のFeatureFlagをコードベースに埋め込みながら新機能の開発を進めていますが、公開前の機能が見えてしまったり、リリース前のコードが実行されてしまうなどの問題がいくつかありました。\n\n本セッションではFeatureFlag運用を3年ほどした経験から、WINTICKETアプリ開発での具体的な運用方法とどのように可用性を向上させたFeatureFlagの運用戦略をとっているかを紹介します。\n\n・WINTICKETでどのようにFlutterでFeatureFlagを用いたトランクベース開発の運用をしているかの紹介\n・その運用で実際に起きた不具合例の紹介\n・そのような不具合がどのような原因で発生したのかの分析\n・不具合を起こさないためのFeatureFlag運用戦略とその具体的な対応方法の紹介\n\n## 想定視聴者\n・FeatureFlagを用いたトランクベース開発をしている方\n・FlutterアプリでFeatureFlagを用いたトランクベース開発を検討している方","starts_at":"2024-11-21T04:00:00+00:00","ends_at":"2024-11-21T04:40:00+00:00","is_lightning_talk":false,"speakers":[{"id":"08ba6150-1288-4e7e-9cfe-aaf9d6acc5fd","name":"batch","avatar_name":"08ba6150-1288-4e7e-9cfe-aaf9d6acc5fd.webp","x_id":"b4tchkn"}],"sponsors":[]},{"id":"f4966e95-b266-4edc-abde-f61c359b3a40","title":"キャッシュレス決済アプリでのFlutterの部分的採用から全面採用まで","description":"## 概要\nKDDI株式会社では、au PAYアプリを内製開発しており、2023年に部分的にFlutterを採用しました。\n基本的にネイティブ（Kotlin/Swift）で開発しているところに、Add-to-appにより部分的にFlutterを取り入れている形です。\nまた、2024年には、ネイティブで開発してきたau PAYの関連アプリをフルリプレイスする形でFlutterを全面採用することにしました。\nFlutterの全面採用は、アプリ開発では勿論、API-GWの開発でも採用しており、バックエンドを含めたAll Flutterなプロジェクトになっています。\n\n本セッションでは、Flutterの部分的採用から全面採用に至るまでに得られた知見を皆様にお届けします。\n\n・Add-to-appによるFlutterの部分的採用\n  ・Flutterで開発した機能\n  ・部分的採用で得られた恩恵と課題\n  ・状態管理にBlocを採用した話\n・バックエンドも含めたFlutter（Dart）の全面採用\n  ・全面採用に踏み切った理由と狙い\n  ・All Dartによるクロスファンクショナルな開発\n・部分的採用か全面採用かの判断の勘所\n\n## 想定視聴者\n・既存のネイティブアプリにFlutterを部分的に採用することに興味がある方\n・現場でFlutterを部分的に採用するか全面採用にするかで迷われている方","starts_at":"2024-11-21T06:40:00+00:00","ends_at":"2024-11-21T07:20:00+00:00","is_lightning_talk":false,"speakers":[{"id":"b10930a5-0ae6-4bb7-8035-92a5d435e6c5","name":"Ren Edakawa","avatar_name":"b10930a5-0ae6-4bb7-8035-92a5d435e6c5.webp","x_id":null}],"sponsors":[]},{"id":"6ccbb95b-ddaf-460e-904b-2f91a5ef8d5f","title":"Dart Native Assets で広がる開発の幅","description":"## 概要\nDart や Flutter ではいままで、ビルド時に追加の処理を行う手段がありませんでした。\nしかし最近、 Native Assets と呼ばれる新機能が追加され、ビルド時に追加の処理を行うことが可能になりました。\n本LTでは、 Native Assets とはそもそもどんな機能なのか、どのように活用できるのかをお話しします。\n\n\n## 想定視聴者\nDart/Flutter でアプリやパッケージ開発をする方全般\n特に、FFIを用いた開発をしている方","starts_at":"2024-11-21T09:00:00+00:00","ends_at":"2024-11-21T09:10:00+00:00","is_lightning_talk":true,"speakers":[{"id":"025ad64a-9d43-43ba-8159-f0fcd9579769","name":"ぎもちん","avatar_name":"025ad64a-9d43-43ba-8159-f0fcd9579769.webp","x_id":"SKKbySSK_TC"}],"sponsors":[]},{"id":"dd12ee26-4d87-4081-a01a-621411231a94","title":"Shorebirdを活用したFlutterアプリの即時アップデート：Code Pushの実践と可能性","description":"本セッションでは、Flutterアプリの「Code Push」（即時コードアップデート）を実現するShorebirdについて深掘りします。Shorebirdを使用することで、FlutterアプリのDartコード部分の更新を、ストア審査なしでエンドユーザーのデバイスに即座に配信できます。\n\nただし、以下の重要な点に注意が必要です：\n- 初回リリースや大幅な変更時は従来通りの審査が必要\n- 更新できるのはDartコードのみ（ネイティブコードは不可）\n- 各アプリストアの規約遵守が必須\n\nこのセッションでは、以下の点に焦点を当てます：\n- Shorebirdの基本概念と仕組み\n- Code Pushの使用方法（ライブデモ含む）\n- CI/CDとの統合\n- 料金体系\n- Shorebirdの利点と課題\n- 実プロジェクトでの経験に基づく知見と教訓\n- アプリストア規約との整合性と法的考慮事項\n\n想定視聴者：\n- 即時アップデートに関心のある開発者\n- Shorebirdを検討中の方\n- 実践的な使用例を知りたい方\n\n複数プロジェクトでのShorebird導入・運用経験を基に、実践的な洞察と具体的なアドバイスを提供します。理論と実践の両面から、Shorebirdの効果的かつ適切な活用方法をお伝えします。技術的側面だけでなく、法的な観点からも安全な利用指針を示します。","starts_at":"2024-11-21T07:40:00+00:00","ends_at":"2024-11-21T08:20:00+00:00","is_lightning_talk":false,"speakers":[{"id":"ab10b87f-1f8a-48f5-b7fc-a4182e4f0a38","name":"Masahiro Aoki","avatar_name":"ab10b87f-1f8a-48f5-b7fc-a4182e4f0a38.webp","x_id":"ma_freud"}],"sponsors":[]},{"id":"02ab1faa-508e-418e-a682-6443148fba5c","title":"Flutterテスト戦略の再考 〜品質と効率のバランスを求めて〜","description":"## 概要\n皆さんが普段開発を行っているプロダクトにおける品質は、どのように保証していますか？QAエンジニアによる検証や、実装者が書くテストなど、さまざまな手法が存在すると思います。\n\nFlutterのテストは一般的に次の3つの種類に分けられます。\n\n- Unit Test\n- Widget Test\n- Integration Test\n\nこれらのテストはそれぞれ異なる役割を持ち、プロダクトの品質を高めるために重要です。特に、Unit TestやWidget Testに分類されるVRT（Visual Regression Testing）であるGolden Testを一度は耳にしたことがある方も多いのではないでしょうか？\n\nしかし、それらのテストを有効かつ効率的に、そしてメンバーに納得感を持ってもらった状態で導入することは決して容易ではありません。\n\n本セッションでは、以下のポイントについて議論します。\n\n各種テストの役割とその効果的な導入方法\nUI/UXを分けて考えてテストする方法\n小さく始めるためのプラクティス\n\nFlutterプロジェクトにおける品質保証とテスト効率のバランスを最適化するための具体的なアプローチを提供します。\n\n## 想定視聴者\n- テスト戦略について議論がしたい人\n- テストを始めたい、またはすでに導入はできているがあまり効果を実感できていない人","starts_at":"2024-11-21T08:40:00+00:00","ends_at":"2024-11-21T08:50:00+00:00","is_lightning_talk":true,"speakers":[{"id":"83283261-e532-4df0-b0ee-ee66afb7d79e","name":"としき","avatar_name":"83283261-e532-4df0-b0ee-ee66afb7d79e.webp","x_id":"osadakun9"}],"sponsors":[]},{"id":"ed95a319-5971-4335-b285-390768dc1be7","title":"僕のstate restorationアカデミア","description":"## 概要\n\nユーザーとして、この場面を想像してみてください：アプリAで長文を入力中、何度か他のアプリBに切り替えて使用し、アプリAに戻ったところ、突然すべてのデータが消えてしまいました。OSがアプリAを終了させてしまったのです！それはあまり良くないuxですね。開発者として、どうやってユーザーを挙動不審な行動に対して守ることができますか？実は、state restorationという簡単な解決方法があります。状態管理についてよく話しますが、state restorationのことを忘れることがあります。最新の個人開発アプリ「Japanana」ではこの機能が必要でしたので、実際の例を使ってその実装方法をこの発表で紹介したいと思います。\n\n## 想定視聴者\n\n• State restorationについて理解したい開発者\n• State restorationを実装したく、その方法を学びたい開発者\n• State restorationを実装した後、テスト方法を学びたい開発者","starts_at":"2024-11-21T08:50:00+00:00","ends_at":"2024-11-21T09:00:00+00:00","is_lightning_talk":true,"speakers":[{"id":"1e6af66f-ac45-4f0d-a958-4ffd7239d1e4","name":"金ちゃん","avatar_name":"1e6af66f-ac45-4f0d-a958-4ffd7239d1e4.webp","x_id":"LucasGoldner"}],"sponsors":[]},{"id":"00af53a6-db85-46b9-a10b-e92a6b1232a4","title":"ネットスーパーがスクリーンリーダーに対応した話 ~あるいはアクセシビリティ向上によるユーザー獲得~","description":"## 概要\n\n令和6年（2024年）4月1日に「改正障害者差別解消法」が施行され、事業者による障害のある方への合理的配慮の提供が義務化されました。ECサイトにおいては誰もが安心してサービスを利用できるように、ウェブアクセシビリティの確保が求められています。\n\nそんななか、私が所属する株式会社10Xで提供している小売チェーン向けECプラットフォームStailerでは視覚障害者の方により便利なネットスーパー・ネットドラッグストア利用体験を提供すべく、スクリーンリーダー（音声読み上げソフト）対応を実施しました。\n\nスクリーンリーダーはFlutterがフレームワークとしてサポートするアクセシビリティ機能の一つでもあります。他にはフォントサイズやコントラストがサポートされています。\n\nこのセッションではFlutterが提供するスクリーンリーダーをサポートする機能について説明するとともに、実際にStailerがスクリーンリーダーに対応した際に困ったことやワークアラウンドの紹介、チームにスクリーンリーダー対応を広めるための活動などをお話します。\n\n参考 https://product.10x.co.jp/entry/2024/07/01/124355\n\n## 想定視聴者\n- アクセシビリティ対応に興味がある方\n- チームの実装方針を決めたり広めたりすることがある方","starts_at":"2024-11-21T02:00:00+00:00","ends_at":"2024-11-21T02:40:00+00:00","is_lightning_talk":false,"speakers":[{"id":"f50c024e-bd44-4740-b343-37a3e6fa71d7","name":"futabooo","avatar_name":"f50c024e-bd44-4740-b343-37a3e6fa71d7.webp","x_id":"futabooo"}],"sponsors":[]},{"id":"5fa4f6aa-47ef-40d9-b6bb-216493ffc1b1","title":"実践的パッケージ戦略","description":"## 概要\nアプリケーションの機能やレイヤーをディレクトリで分けて表現することは普通に行うことだと思います。\nこのディレクトリの構成を機能単位やレイヤーでパッケージ化します。\n\nパッケージ化すると機能ごとの依存度が減り、意図しない機能を実行する危険性を減らすことができます。\nまた、単一のパッケージのみテストを実行したり、依存度が少ないことで機能を切り離したりすることも比較的容易になります。\n\nただし、レイヤーでパッケージ化する場合はある程度入念な設計が必要になります。\n例えば、 UI から直接通信処理を実行させたくないような場合、単純にパッケージを分割しているだけではファイルをインポートすることで簡単に処理を実行できてしまい、あまりその恩恵を受けることができません。\nこの恩恵を受けるための一つの手法として依存性逆転の原則があります。\n\nここでは、 Riverpod を利用した依存性逆転の原則の実装の説明と melos を利用した依存の解決方法、並列でテストを実行した際のカバレッジの算出など、開発の現場で行った実践的なお話をさせてもらいます。\n\n## 想定視聴者\n- これからサービスを立ち上げる方\n- アプリケーションが大きくなって依存の整理に苦しんでいる方","starts_at":"2024-11-21T05:50:00+00:00","ends_at":"2024-11-21T06:30:00+00:00","is_lightning_talk":false,"speakers":[{"id":"7f7e92a6-48d1-4263-95c6-4cf6c8810434","name":"KyoheiG3","avatar_name":"7f7e92a6-48d1-4263-95c6-4cf6c8810434.webp","x_id":"KyoheiG3"}],"sponsors":[]},{"id":"6cda6895-57f8-47dc-ab29-ebcbd9c7f95a","title":"気をつけたい！Desktop対応で陥りやすい罠とその対策","description":"## 概要\nMobile向けに開発したものをWebや他のDesktopプラットフォームで表示すると、「なんか違う？」と感じたことはありませんか？\n本セッションでは、MobileとDesktopをワンソースで開発する中で遭遇した実際の事例を基に、Desktopプラットフォームでの開発時に特に注意が必要なポイントを詳しく解説します。\n\n- MobileとDesktopプラットフォームの違いについての概要\n- プロジェクトで遭遇した具体的な事例の紹介\n- 注意が必要なWidgetと、それぞれの対応策\n- プラットフォームごとの差分を考慮した開発手法の提案\n\n## 想定視聴者\n- MobileアプリをDesktopプラットフォームに展開しようと考えている方\n- Desktopプラットフォームでの開発に興味がある方\n- ワンソースでの複数プラットフォーム対応に挑戦している方\n- Desktopプラットフォームの開発経験が少ない方","starts_at":"2024-11-22T04:30:00+00:00","ends_at":"2024-11-22T05:10:00+00:00","is_lightning_talk":false,"speakers":[{"id":"eff9b7c7-46ed-4839-afe6-8b2bf2df72b5","name":"後藤 孝輔","avatar_name":"eff9b7c7-46ed-4839-afe6-8b2bf2df72b5.webp","x_id":"Gotchi0001"}],"sponsors":[]},{"id":"c56e7002-02e3-44d5-825c-b64934d12288","title":"Effective Form ~ Flutterによる複雑なフォーム開発の実践 ~","description":"## 概要\n\n「フォーム」を取り扱うアプリの機能実装は、考慮すべき点が多岐に渡り、難易度が非常に高い部分です。\n\n例えば、商品注文や申請作成の入力画面は、単純な入力画面とは性質が異なり、複雑な仕様の中でミスができない実装が求められます。\nそこでは、高度なバリデーションや、複数ソースからの動的なデータ取得・更新など、「複雑なロジックをフロントで実装する必要がある」点で多くの課題が存在します。\n\nFlutterの活用は、開発効率を上げる有効な手段の１つですが、単に導入するだけでは上記課題は解消しきれません。\n本トークでは、複雑度が極めて高いフォーム開発を、宣言的かつ型安全に保つことで、効率的に実現する方法をご紹介します。\n\nトピック\n\n- Flutterでのフォーム画面開発\n  - 実プロダクトの事例紹介\n- 状態管理とバリデーションのアプローチ\n  - 状態設計の手法\n  - Riverpod, flutter_hooksの活用\n  - フォーム要素間の相互依存関係の処理\n  - 複数画面間でのデータ同期の実装\n- ユーザー体験向上の工夫\n  - エラー、アラートのフィードバック\n  - 入力補助\n  - 細かな操作感\n\n## 想定視聴者\n\n- フォーム開発の設計や実装に悩んだことがある方\n- Flutterを使って効率的に複雑なフォームを実装したい方","starts_at":"2024-11-22T08:30:00+00:00","ends_at":"2024-11-22T09:10:00+00:00","is_lightning_talk":false,"speakers":[{"id":"2a8b459b-10a2-4b8f-a240-c5bad7a06541","name":"たまねぎ","avatar_name":"2a8b459b-10a2-4b8f-a240-c5bad7a06541.webp","x_id":"_chocoyama"}],"sponsors":[]},{"id":"83897c0b-3a06-48a3-99e8-584195e318ac","title":"Firebase Dynamic Links終了に備える：FlutterアプリでのAdjust導入とディープリンク最適化","description":"## 概要\n2025年8月にFirebase Dynamic Links（FDL）のサービスが終了することが発表され、多くのアプリ開発者がAdjust、AppsFlyer、Bitly、Branch、Kochavaなど代替ソリューションの選定を迫られています。\n\n本セッションでは、実際のプロダクトで行ったFDLからAdjustへの移行作業を通じて、FDLの主要な機能をカバーしつつ、Adjustを用いたディープリンクの設定方法、ディープリンク機能の実装例、分析に不可欠なログの実装方法、およびパーソナライズされたユーザー体験を提供するための戦略とその制約を紹介します。\n\nこれにより、FDL終了後のアプリ開発において、どのようにスムーズな移行を実現し、必要な機能を維持するかについて、明確な指針を提供します。このセッションを通じて、ディープリンク技術がどのようにアプリの成長と成功を支えるかを理解し、実際の開発に役立つ知識を提供します。\n\n## 想定視聴者\n- FDLを利用したプロダクトを運用しており、代替の移行先を検討している方\n- ユーザーエンゲージメントの向上やアプリの成長に関心があり、ディープリンク技術を活用したいと考えている方","starts_at":"2024-11-22T06:30:00+00:00","ends_at":"2024-11-22T07:10:00+00:00","is_lightning_talk":false,"speakers":[{"id":"b4ec5d7a-95c9-48ef-8643-5963071b713f","name":"techiro","avatar_name":"b4ec5d7a-95c9-48ef-8643-5963071b713f.webp","x_id":"appgrape"}],"sponsors":[]}]}]''';

const _jsonContentV4 =
    r'''[{"id":"d6432c3c-3ef9-44ef-aa69-78f5e4dd867d","name":"A Dash","sessions":[{"id":"0b5536f2-cde0-4224-b84c-df641daed1cb","title":"SliverAppBarはなぜ変化する？ ~ Sliverを内側から理解する ~","description":"## 概要\nSliverAppBarはスクロールに応じて大きさが変化したり、スクロールを中断時に出現したりするAppBarのWidgetです。\nちょっとリッチなスクロールを実装する際に利用するこのWidget、\nどうしてこのような動きが実現できるのでしょうか？\nSliverAppBarを題材に、FlutterのSliverの中身を深掘りして解説します。\nまた、Flutter 3.24で追加されたPinnedHeaderSliver、SliverResizingHeaderについても、中身を解説します。\n\n具体的には以下の内容について解説します。\n- SliverAppBar の動き\n- Sliverとは\n- Sliverの仕組み\n- SliverAppBarの仕組み\n- PinnedHeaderSliver、SliverResizingHeaderについて\n\nFlutterでのスクロール画面でのエラーに対し、\nCustomScrollView、Sliverの利用はよく採用される解決策です。\n今回の発表を通してSliverへの理解を深めていただき、\n開発力の向上の一助となればと思います。\n\n## 想定視聴者\n\n- Flutterでリッチなスクロール画面を実装したい方\n- Flutterの内部実装に興味のある方\n- Sliverの取り扱いに悩んでいる方","starts_at":"2024-11-22T08:30:00+00:00","ends_at":"2024-11-22T09:10:00+00:00","is_lightning_talk":false,"video_url":"https://www.youtube.com/watch?v=wvU6Cu0x7dg","speakers":[{"id":"677f3a6c-587e-4fcc-a11a-37e13d795df9","name":"Aoi Umigishi","avatar_name":"677f3a6c-587e-4fcc-a11a-37e13d795df9.webp","x_id":"Aoi_Umigishi"}],"sponsors":[]},{"id":"3bbe9e9a-d41f-4c4d-994c-0064cd30fd94","title":"Monetizing Your Indie Flutter App to $1k in Monthly Revenue and Beyond","description":"## 概要\nOnly ~17% of apps reach $1k in monthly revenue. Learn best practices on crossing $1k MRR and beyond from personal experience building two profitable apps and advice from other successful app founders\n\n## 想定視聴者\nApp developers/founders","starts_at":"2024-11-22T05:30:00+00:00","ends_at":"2024-11-22T06:10:00+00:00","is_lightning_talk":false,"video_url":"https://www.youtube.com/watch?v=O_wD6Q_FWV4","speakers":[{"id":"e34f0e48-bc98-4621-9fd8-97fab8e4f112","name":"Jeffrey Bunn","avatar_name":"e34f0e48-bc98-4621-9fd8-97fab8e4f112.webp","x_id":"jeffreybunn"}],"sponsors":[{"id":16,"name":"RevenueCat","logo_name":"0458e1bc-5ed3-4d9c-9248-e28e3eba2d41.webp","description":"RevenueCatは、サブスクアプリの収益化を支援する包括的なプラットフォームです。企業はRevenueCatを利用して、アプリ内課金の管理、サブスクリプションの追跡、収益分析を一元化できます。シームレスな統合と強力な分析ツールを提供することで、収益の最大化をサポートし、継続的な成長を促進します。Notion、Photoroom、ZOZOなど3万2千を超えるアプリで採用され、サブスクビジネス成功に必要な柔軟なソリューションを提供しています。","url":"https://www.revenuecat.com/jp/","type":"platinum","sort_id":3}]},{"id":"f6931b4e-30db-4a4e-9582-7a54c135b740","title":"Flutterによる効率的なAndroid・iOS・Webアプリケーション開発の事例 - スタディサプリ for SCHOOL","description":"## 概要\n株式会社リクルートが提供するスタディサプリ for SCHOOLは、生徒の進路選択を支援するアプリケーションです。\n勉強したい学問や興味のある仕事を発見する、学校の資料請求やオープンキャンパスを予約するといった、進路を考える際に必要となる機能を提供しています。利用できる環境は、Webアプリケーション、AndroidとiOSのモバイルアプリケーションです。\n\n2024年現在、開発フレームワークとしてFlutterを採用しています。\n初回リリースとなる2020年ではAndroidとiOSともにNative SDKによる開発でしたが、2023年にFlutterで作られたアプリケーションに更新しました。また、2024年にはVue.jsで作られたWebアプリケーションをFlutter Webで更新します。\n\nこのセッションはスタディサプリ for SCHOOLをFlutterでリプレースした事例において、Flutterにより開発効率がどのように向上したかを紹介します。そして、AndroidとiOSだけでなくWebもFlutterで開発することとした狙いと、その過程で得られた教訓を共有します。\n\n## 想定視聴者\n- Flutterによる効率的な開発に関心のある方\n- Flutter Webに関心のある方","starts_at":"2024-11-21T05:50:00+00:00","ends_at":"2024-11-21T06:30:00+00:00","is_lightning_talk":false,"video_url":"https://www.youtube.com/watch?v=5I9L05bBv6Q","speakers":[{"id":"0116ff6a-5171-44d3-9733-f047f2f17930","name":"若宮浩司","avatar_name":"0116ff6a-5171-44d3-9733-f047f2f17930.webp","x_id":"D_R_1009"}],"sponsors":[{"id":4,"name":"株式会社リクルート","logo_name":"2f556387-3f38-4635-b4f0-aef28efd5d67.webp","description":"私たちは、個人と企業をつなぎ、より多くの選択肢を提供することで、「まだ、ここにない、出会い。」を実現してきました。いつでもどこでも情報を得られるようになった今だからこそ、より最適な選択肢を提案することで、「まだ、ここにない、出会い。」を、桁違いに速く、驚くほどシンプルに、もっと身近にしていきたいと考えています。","url":"https://www.recruit.co.jp/employment/","type":"gold","sort_id":7}]},{"id":"4156b633-8043-4d94-8da8-39c367088c59","title":"アニメーションを最深まで理解してパフォーマンスを向上させる","description":"## 概要\nFlutter でのアニメーション実装は、簡易に実装できてアプリの魅力を向上させる重要な機能ですが、複雑なアニメーションや大規模なアプリケーションでは、パフォーマンスの問題に直面することがあります。\n複雑なアニメーションを実装する際、フレームレートの低下やメモリ使用量の増加など、パフォーマンスの低下が課題となっています。また、アニメーションの最適化手法や、適切なタイミングでの RepaintBoundary の使用など、開発者が理解すべき点が多岐にわたります。\n本セッションでは、 Flutter のアニメーションを深く理解し、パフォーマンスを向上させるための実践的な手法を紹介します。 Flow を活用した複雑なアニメーションの実装、アニメーションのパフォーマンス最適化テクニック、そしてレンダリングを最小限に抑えるための tips について詳しく解説します。\n1. Flutter アニメーションの基本概念と内部実装を理解する\n2. Flow を使用した高度なアニメーションの実装手法\n3. アニメーションパフォーマンスの測定と分析\n4. レンダリング最適化テクニック\n\n## 想定視聴者\n・ 複雑なアニメーションの実装に苦戦している開発者\n・ アニメーションのパフォーマンス向上に興味がある開発者","starts_at":"2024-11-21T06:40:00+00:00","ends_at":"2024-11-21T07:20:00+00:00","is_lightning_talk":false,"video_url":"https://www.youtube.com/watch?v=gRS1gc1A5VU","speakers":[{"id":"bda5c5dd-2c44-49da-afa6-cd6560725064","name":"みね","avatar_name":"bda5c5dd-2c44-49da-afa6-cd6560725064.webp","x_id":"nihon_kaizou"}],"sponsors":[]},{"id":"83119f09-e90c-468b-9a5e-69d2df646dfb","title":"DevTools Extensions で独自の DevTool を開発する","description":"## 概要\nFlutter におけるアプリ開発において、 DevTools は必要不可欠な存在です。\nしかし既存の DevTools に独自の機能をカスタマイズできることはあまり知られていません。\nDevTools を独自にカスタマイズすることで、ログの表示制御、キャッシュの表示、アプリ内の開発者用の画面を DevTools に移行するなど、開発体験の向上が見込めます。\n\nこのセクションでは、devtools_extensions パッケージを使用して、 DevTools を独自にカスタマイズする方法や、\n実際のチーム開発でどのような機能をカスタマイズしているかなどの実例を紹介します。\n加えてパッケージ製作者向けに自身のパッケージに DevTools Extensions を提供する方法も解説します。\n\n## 想定視聴者\n- DevTools の開発に興味のある方\n- チーム開発の生産性を上げたい方\n- アプリ内の開発用画面を DevTools に移行させたい方","starts_at":"2024-11-22T07:30:00+00:00","ends_at":"2024-11-22T08:10:00+00:00","is_lightning_talk":false,"video_url":"https://www.youtube.com/watch?v=BPb1PQ_EW9A","speakers":[{"id":"67bfcf7a-da80-4603-81ee-cefe1240fbca","name":"Koki Yoshida","avatar_name":"67bfcf7a-da80-4603-81ee-cefe1240fbca.webp","x_id":"koki8442"}],"sponsors":[]},{"id":"4072087a-1854-4d45-812e-60beb344ff48","title":"Flutterアプリにおけるユーザー体験の可視化と計測基盤構築","description":"## 概要\nSLI/SLOはSREでよく使われる概念ですが、モバイルアプリ開発にはまだ馴染みが薄いかもしれません。\n私たちのプロダクトでは障害発生率が高く、早期の検知と解消が求められていました。\nそこで、SLI/SLOの概念をモバイルアプリに適用し、ユーザー体験の低下を即時に検知する仕組みを構築しました。\n\nこの仕組みにより、以下の指標をリアルタイムで監視し、即時に対応可能となりました：\n- 失敗率：一定以上のユーザーが機能利用時にエラーが発生したケース\n- キャンセル率：一定以上のユーザーが機能利用時に何らかの理由でキャンセルしたケース\n- 中断率：一定以上のユーザーが機能利用時にアプリを強制終了したケース\n\n現在、この監視システムは40以上の機能に適用されています。\n\nこのセッションでは以下の内容について詳しく解説します：\n1. SLI/SLOの基本概念\n2. 一般的なSLI/SLOとユーザー体験を検知するSLI/SLOの違い\n3. ユーザー行動の計測方法\n4. 計測基盤の構築：工夫と課題\n   - 時系列データのログ計測\n   - 高オブザーバビリティの実現オプション\n5. アラート基盤の構築：工夫と課題\n   - ノイズ最小化の方法\n   - チームにアラートを定着させる方法\n\n## 想定視聴者\n- Flutterアプリ内でのDartを用いた計測基盤構築に興味がある方","starts_at":"2024-11-22T01:10:00+00:00","ends_at":"2024-11-22T01:50:00+00:00","is_lightning_talk":false,"video_url":"https://www.youtube.com/watch?v=LX5_9WOWWZs","speakers":[{"id":"932e6952-87e2-4820-8084-128d69a3536a","name":"おさたく","avatar_name":"932e6952-87e2-4820-8084-128d69a3536a.webp","x_id":"ostk0069"}],"sponsors":[]},{"id":"a1ba9bfd-87c8-47b2-b5af-a50e0c64c300","title":"キャンセルします！処理を","description":"## スポンサー名\n\n株式会社ビットキー\n\n## 概要\n\n処理をキャンセルするというパターンを取り入れると、非同期処理の内容の整理に役立つことがあります。\n時間がかかる処理をタイムアウトさせたり、ユーザーの希望に応じて止めたり、あるいは複数のうち最も早い応答だけを採用するような処理に効果的です。\n結果として不要な処理や通信が抑えられ、あなたのアプリの動きのレベルを一段引き上げることにもつながります。\n\n本セッションでは、 協調的なキャンセルの考え方を `dart:async` の `Timer` を例に紹介したうえで、\nSwift Concurrency や Kotlin Coroutine のキャンセルを、 Method Channel で Flutter の世界に持ち込む方法を解説します。\nさらに、 Riverpod の `.autoDispose` と合わせて、キャンセルをアプリに組み込む方法についてもお話しします。\n\n## 想定視聴者\n\n* タイムアウトの実装方法にお悩みの方\n* ユーザーの「やっぱりやめたい」という思いに応えたい方\n* Flutter から Swift Concurrency や Kotlin Coroutine を扱いたい方","starts_at":"2024-11-21T02:00:00+00:00","ends_at":"2024-11-21T02:40:00+00:00","is_lightning_talk":false,"video_url":"https://www.youtube.com/watch?v=beD681HhPjs","speakers":[{"id":"5d252897-2c14-4232-b51d-8f9bfa47fae3","name":"Masatoshi Tsushima","avatar_name":"5d252897-2c14-4232-b51d-8f9bfa47fae3.webp","x_id":"utisam"}],"sponsors":[{"id":17,"name":"株式会社ビットキー","logo_name":"42723fb3-273a-413c-893f-89bb9c99eea5.webp","description":"ビットキーは、独自開発のデジタルコネクトプラットフォームを通して、人と「暮らし」や「仕事」の間にある分断を解消するアプリ/SaaSを開発しています。 あらゆるサービスやモノを柔軟につなげることで、体験のアップデートを進めています。","url":"https://bitkey.co.jp/","type":"gold","sort_id":8}]},{"id":"e97ebf37-5753-43c9-83ea-2be68e7a4363","title":"Seamless Flutter Native Integration: FFI & Pigeon","description":"## 概要\nThis presentation introduces two tools for bridging Flutter apps with native code: FFI (Foreign Function Interface) and Pigeon. FFI enables direct calls to C/C++ functions, optimizing performance and hardware access. Pigeon streamlines method invocations between Flutter and native platforms (Android/iOS), facilitating better data communication. I’ll demonstrate the implementation and success stories of using these tools to enhance native functionality in Flutter applications.\n\n## 想定視聴者\nAiming to expand knowledge of FFI & Pigeon for native platform integration.","starts_at":"2024-11-22T06:30:00+00:00","ends_at":"2024-11-22T07:10:00+00:00","is_lightning_talk":false,"video_url":"https://www.youtube.com/watch?v=ZElSVpyRtAo","speakers":[{"id":"0b712b58-02e9-4ed1-a51d-7da03fc67457","name":"Dreamwalker","avatar_name":"0b712b58-02e9-4ed1-a51d-7da03fc67457.webp","x_id":"jaichangpark"}],"sponsors":[]},{"id":"61d31fb9-fbc5-4d01-aad5-139e6568db15","title":"体験！マクロ時代のFlutterアプリ開発","description":"## 概要\nDart の新機能であるマクロ（Dart macros）の登場により、Flutter アプリ開発で煩雑だったボイラープレートの問題や build_runner によるコード生成の問題の解決が期待されています。\n\nとはいえマクロはまだまだ試験的に公開されている段階であるために自由に触りづらく、できることを把握してどう活用するかをイメージしづらいのが現状です。サンプルとして話題に上がるマクロも JSON とオブジェクトの変換が簡単になるというもので、Flutter アプリ開発にどれほどのインパクトをもたらす機能なのかをイメージするには力不足です。\n\nこのセッションでは、実際に Flutter アプリ開発で活用することを想定したマクロをいくつか紹介し、実際にコーディングして使ってみることで、マクロ導入後の Flutter アプリ開発がどのように変化するのかを体験します。\n\n来るマクロの正式リリースに備え、マクロの活用方法や作り方、そして適切な距離感を今から考えてみませんか？\n\n## 想定視聴者\n- 2025 年以降も Flutter アプリ開発を続ける予定のすべての開発者\n- マクロを使う方・作る方どちらの目線もカバーした内容です","starts_at":"2024-11-22T02:00:00+00:00","ends_at":"2024-11-22T02:40:00+00:00","is_lightning_talk":false,"video_url":"https://www.youtube.com/watch?v=Xitie4TrnPo","speakers":[{"id":"a7dc0952-73c1-4e4a-a50a-aa6d553369ae","name":"ちゅーやん","avatar_name":"a7dc0952-73c1-4e4a-a50a-aa6d553369ae.webp","x_id":"chooyan_i18n"}],"sponsors":[]},{"id":"b4484026-c80b-48ae-a518-f9c14f04f5a8","title":"Figma Dev Modeで変わる！Flutterの開発体験","description":"## 概要\n2024年に発表されたFigmaの新機能 フォーカスビュー、ステータス管理、etc... これらDev Modeの機能の概要を説明すると共に、ベストプラクティスを共有します。\nFigma Dev Modeの活用がFlutterの開発体験をどれだけ向上されるかをご覧頂きます。\n\nエンジニアとデザイナーが共同で発表するこのトークでは、デザインから実装までの一貫したワークフローをロールプレイング形式でお見せします。\nエンジニアとデザイナーそれぞれの仕事の相互理解に繋がる内容で、一緒にご覧頂くことで組織のコラボレーションを強化することにも繋がるでしょう。\n\n## 想定視聴者\n- Flutterエンジニア\n  デザイナと協業し、Widgetの実装等を行うFlutterエンジニア\n- UI/UXデザイナー、\n  デザインツールとしてFigmaを利用し、Flutter開発者との協業するデザイナー。\n- プロダクトマネージャー\n  デザインと開発のプロセスを効率化し、チームのアウトカムを向上させたいマネージャー","starts_at":"2024-11-21T04:50:00+00:00","ends_at":"2024-11-21T05:30:00+00:00","is_lightning_talk":false,"video_url":"https://www.youtube.com/watch?v=qHpcyQy7bYw","speakers":[{"id":"e086a7c1-4cc8-4c48-a58c-391ebe97e385","name":"よーたん","avatar_name":"e086a7c1-4cc8-4c48-a58c-391ebe97e385.webp","x_id":"yohta_watanave"},{"id":"a5efe6e5-0e8d-4720-aceb-27c105115772","name":"ゆめみ","avatar_name":"a5efe6e5-0e8d-4720-aceb-27c105115772.webp","x_id":null}],"sponsors":[]},{"id":"000db4b0-4065-48ed-8925-afea039e2c72","title":"ImpellerとSkiaについて","description":"Impellerについて知っていますか？Skiaに代わる形で導入されたレンダリングエンジンでFlutter v3.7.0でiOSにおいてpreviewが始まり、v3.16.0ではAndroidでもpreviewが開始されました。\n皆さん様々な印象があると思います。有効にしたら動作が速くなった、名前が強そう、シャドウ重くない？などなど...\nとはいえ実際にSkiaからどのように変わり、なぜ速くなったのかを理解してる人はあまり多くないと思います。\nFlutterはありがたいことにOSSでこの魔法のような技術がどう実現されているかを実際に読むことができます。\nこのトークではWidgetTreeから実際に描画されるまでを追いながらSkiaからImpellerでどのように改善されたかを解説していきます。\n\n## 想定視聴者\n- Flutterの内部を知りたい人\n- Flutterに根ざして開発したい人","starts_at":"2024-11-21T04:00:00+00:00","ends_at":"2024-11-21T04:40:00+00:00","is_lightning_talk":false,"video_url":"https://www.youtube.com/watch?v=9eGo1IClarw","speakers":[{"id":"3f53ad5d-788f-48ae-838f-9924ed43139f","name":"mori","avatar_name":"3f53ad5d-788f-48ae-838f-9924ed43139f.webp","x_id":"EXCode013"}],"sponsors":[]},{"id":"18ffaf08-03ac-4284-95cf-bd217dbccd69","title":"OS 標準のデザインシステムを超えて - より柔軟な Flutter テーマ管理","description":"## 概要\nFlutter SDK は、Google の Material Design と Apple の Human Interface Guidelines に準拠したテーマ (Material Theme, Cupertino Theme) と関連 API を提供しており、これにより OS 標準のデザインに沿ったアプリ開発が容易になります。\nしかし、独自のデザインシステムを採用したい場合にテーマ管理が複雑化したり、OS 標準のデザインシステムアップデートに伴う破壊的変更により開発コストが増大したりする可能性があります。\n\n本セッションでは、Flutter のテーマと各 Widget のスタイルの関係性を掘り下げ、OS 標準のデザインシステムへの依存を軽減するテーマ管理のアプローチを発表します。\nこれにより、独自のデザインシステムの実現や、OS 標準のデザインシステムアップデートの影響を最小限に抑えることを目指します。\n加えて、Flutter Roadmap でも触れられている blankcanvas の最新動向についても解説します。\n\n## 想定視聴者\n- 独自のデザインシステムを Flutter アプリに適用したいと考えている開発者\n- Flutter のテーマ管理をより深く理解し、効率的な開発手法を学びたい開発者","starts_at":"2024-11-22T04:30:00+00:00","ends_at":"2024-11-22T05:10:00+00:00","is_lightning_talk":false,"video_url":"https://www.youtube.com/watch?v=7RB2YTnbukI","speakers":[{"id":"651bd8da-0d3d-45f3-8e5c-eab1af10d8ad","name":"ronnnnn","avatar_name":"651bd8da-0d3d-45f3-8e5c-eab1af10d8ad.webp","x_id":"ronnnnn_jp"}],"sponsors":[]}]},{"id":"f6ee9501-0698-44ea-ad21-eb051ee94a8e","name":"B Dash","sessions":[{"id":"72c94df3-82ee-41ce-8b7f-d575eef2e9d9","title":"Master of Isolate","description":"## 概要\nDartでは、非同期処理と並行処理を効率的に行うためのキーコンポーネントとしてIsolateが提供されています。\n特にFlutterアプリケーションのパフォーマンス向上やレスポンス性の向上において、Isolateの正しい理解と活用は非常に重要です。\n\nこのセッションでは、DartのIsolateの内部動作を深く掘り下げ、どのようにしてメモリを共有せずに並行処理を実現しているのかを解説します。また、実際のアプリケーション開発における典型的な使用例とベストプラクティスを紹介し、皆さんのコード品質を一段階上げる手助けをします。\n\nこのセッションの内容は以下の通りです：\n\n- Isolateの基本概念とFutureとの違い\n- DartにおけるIsolateの内部メカニズム\n- メインIsolateとサブIsolate間の通信方法\n- Isolateを使うべき箇所とそうでない箇所\n\n想定視聴者：\n- DartやFlutterでの非同期処理を深く理解したい方\n- アプリケーションのパフォーマンスを最適化したいFlutter開発者\n- Isolateの使い方に課題を感じている方\n- 並行処理を活用し、スケーラブルなアプリケーションを作りたいエンジニア\n- 実際のIsolateを理解した上で、活用したユースケース","starts_at":"2024-11-21T08:30:00+00:00","ends_at":"2024-11-21T08:40:00+00:00","is_lightning_talk":true,"video_url":"https://www.youtube.com/watch?v=ev9s_O5l-zA","speakers":[{"id":"4ede673b-d9bb-4d1d-bb1f-cebc6e23b998","name":"新垣清奈","avatar_name":"4ede673b-d9bb-4d1d-bb1f-cebc6e23b998.webp","x_id":null}],"sponsors":[]},{"id":"b57f3efd-b31d-4d57-aaa3-f45f1b17f727","title":"出前館アプリにおけるFlutterアプリ設計とそれを支えるCICD環境の進化","description":"## スポンサー名\n株式会社出前館\n\n## 概要\n本セッションでは、出前館アプリにおけるFlutterアプリ設計、そしてそれらを支えるCICD環境について述べます。\n\nセッション前半では出前館アプリのアプリ設計についてお話しします。\n出前館アプリのフォルダ構成やAsset Management、そしてState Managementについてお話しします。\n現在出前館では、提供するすべてのアプリでFlutterを採用しています。それら経験をご紹介しつつ、現在の出前館アプリのアプリ設計についてご紹介いたします。\n\nセッション後半では出前館アプリを支えるCICD環境について述べます。\nアプリ開発においてCICD環境はなくてはならない存在です。出前館アプリでは、これまでCICD環境(bitrise)の導入、React NativeからFlutterへの移行に伴う改修、そして新たなCICD環境(TeamCity)への移行に取り組んできました。\n4年間という短い期間にこれだけの取り組みをしてきたチームは少ないでしょう。セッション後半では、この苦労と葛藤についてご紹介します。\n\n## 想定視聴者\n・Flutterを用いてアプリ開発を行うエンジニア\n・CICD環境の構築やその運用に取り組むエンジニア","starts_at":"2024-11-22T02:00:00+00:00","ends_at":"2024-11-22T02:40:00+00:00","is_lightning_talk":false,"video_url":"https://www.youtube.com/watch?v=oynN52DSw-0","speakers":[{"id":"cefa50ab-4d04-4cf1-a3f9-9ee50e2b630b","name":"廣部貴徳","avatar_name":"cefa50ab-4d04-4cf1-a3f9-9ee50e2b630b.webp","x_id":"taka1068"}],"sponsors":[{"id":18,"name":"株式会社出前館","logo_name":"2a4cbb69-3500-475a-bfc2-980782f619bb.webp","description":"出前館はクイックコマースサービスとして領域を拡大し、当社のコーポレートミッション「テクノロジーで時間価値を高める」に基づき、利用いただいた皆さまに対して“時間価値の最大化“を実現していきたいと考えています。\n地域活性化とともに、少子高齢化や買い物難民の増加をはじめとした地域や社会課題の解決に向き合い、社会にとって不可欠なライフインフラとして日本経済の発展に貢献できるサービスを目指して挑戦を続けています。","url":"https://recruit.demae-can.co.jp/","type":"platinum","sort_id":2}]},{"id":"05b3d592-16e4-4831-b6f4-44870c555dd1","title":"Flutterと難読化","description":"## 概要\nリリースしたアプリのクラッシュ事例を追うべく、Crashlyticsなどのサービスを眺めていると、身に覚えのないスタックトレースを見た経験はありませんか？ Flutter では release buildの場合には、コードが難読化されバイナリに含まれます。\nFlutterはAndroid・iOSをはじめとして多くのプラットフォームで動作させる事ができるフレームワークです。Flutterはどのようにして、多くのプラットフォームをサポートする難読化を実現しているのでしょうか？\n\nこのセッションは、大きく2つの要素から構成されます。\n1つ目は、難読化されたコードに直面したときのトラブルシューティングに焦点を当てたものです。例えば、難読化されたスタックトレースを読む方法や、flutter symbolize の仕組みやオプションについて紹介します。\n2つ目は、Flutter の難読化そのものがどのようにして行われるかについて焦点を当てます。Flutterが難読化を行うステップと各プラットフォームでの実例を紹介しつつどのような難読化が行われるかについて紹介します。\n\n## 想定視聴者\n- 難読化に関連したトラブルシューティングについて知りたい人\n- 難読化そのものについて理解を深めたい人\n- Flutter 特有のマルチプラットフォームでの難読化について知りたい人","starts_at":"2024-11-22T05:30:00+00:00","ends_at":"2024-11-22T06:10:00+00:00","is_lightning_talk":false,"video_url":"https://www.youtube.com/watch?v=x2jMRJe_bSY","speakers":[{"id":"36a674f9-b098-4aeb-8dcf-26ecdca334e4","name":"chigichan24","avatar_name":"36a674f9-b098-4aeb-8dcf-26ecdca334e4.webp","x_id":"chigichan24"}],"sponsors":[]},{"id":"71216c8c-fbb0-45e1-a72d-e544b6b712bd","title":"ステートマシンで実現する高品質なFlutterアプリ開発","description":"## 概要\nAPIとの通信は完了したのにローディング表示が消えない、データが存在しない場合の実装が漏れていて表示が崩れる…そんな問題に直面したことはありませんか？\nこのようなバグを減らし、優れたアプリを開発するための状態管理の手法は常に重要な課題とされてきました。\n\nこのセッションでは、チームラボが高品質なアプリ開発を実現するために採用しているステートマシンを用いた状態管理手法を詳しく解説します。\n\nステートマシンについての基本概念から始まり、簡単な画面での例を交え、現在Flutterにおいて主流の状態管理手法であるRiverpodとの比較も行います。 その後、複雑な画面でのステートマシン利用例や、弊社が開発した状態管理パッケージの紹介、ステートマシンを効率的に利用するためのアーキテクチャ、ステートマシンを採用することによって得られる、コーディング以外の利点についても説明します。\n\n## 想定視聴者\n* Flutterにおける状態管理に関心のある方\n* setStateやHooks,Riverpodでの状態管理に課題を感じている方","starts_at":"2024-11-21T04:50:00+00:00","ends_at":"2024-11-21T05:30:00+00:00","is_lightning_talk":false,"video_url":"https://www.youtube.com/watch?v=nfL9ffl8ajs","speakers":[{"id":"a87ad2ac-dc69-44fb-861d-ef57f3a3f41b","name":"そた","avatar_name":"a87ad2ac-dc69-44fb-861d-ef57f3a3f41b.webp","x_id":"_sotaatos"}],"sponsors":[{"id":20,"name":"チームラボ株式会社","logo_name":"dc3c5be6-a166-4ef0-ac82-ba7d18120ad1.webp","description":"最新のテクノロジーを活用したソリューション、大規模なシステム開発や、プロダクト、デジタルコンテンツの制作、都市計画や建築空間設計などを行う。\nアーティスト、プログラマ、エンジニア、デザイナー、CGアニメーター、数学者、建築家など、デジタル社会の様々な分野のスペシャリスト総勢1000名から構成されているウルトラテクノロジスト集団で、アート、サイエンス、テクノロジー、クリエイティビティの境界を越えて、集団的創造をコンセプトに活動している。","url":"https://www.team-lab.com/","type":"gold","sort_id":5}]},{"id":"e57f61d9-5b8b-49a0-89d1-7e3031e4407a","title":"WasmがFlutter on the Webにもたらす変化","description":"Flutter on the WebがStableになってから３年経ち、さまざまな変化が加えられてきました。\n今年はHTML renderer廃止に関するドキュメントが公開され、今後CanvasとWasmのrendererが主力になっていきます\nWasmサポートによって良くなること、できなくなることをHTML,Canvas rendererと実際に動作を比較していきます。\n\nこのセッションでは、以下の内容についてお話しします：\n1. Wasmとは一体何なのか\n2. Flutter on the WebのWasmサポートで何が変わったのか\n3. Wasmサポートで、できるようになること、できなくなることをHTML,Canvasとの比較\n4. Flutter on the Webの今後\n\n想定視聴者\nFlutter on the WebのWasmサポートで何が変わるか興味がある方","starts_at":"2024-11-22T01:10:00+00:00","ends_at":"2024-11-22T01:50:00+00:00","is_lightning_talk":false,"video_url":"https://www.youtube.com/watch?v=YvWAAlLHg5Q","speakers":[{"id":"8443ba6e-8169-4e7e-8aee-6d200a58a5a5","name":"akaboshinit","avatar_name":"8443ba6e-8169-4e7e-8aee-6d200a58a5a5.webp","x_id":"akaboshinit"}],"sponsors":[]},{"id":"369e19d9-1f27-40e6-b294-64c6ca9bfcae","title":"マッチングアプリ『Omiai 』のFlutterへのリプレイスの挑戦","description":"## スポンサー名\n株式会社Omiai\n\n## 概要\n株式会社Omiai では、長年運営してきたマッチングアプリ『Omiai 』をFlutterでリプレイスする取り組みを進めています。\n\niOS・Android 両プラットフォームの古いコードベースが抱える技術的負債や仕様の差異などの課題解決を目指し、ゼロからのFlutterプロジェクト始動を機に、様々な改善や工夫に挑戦しています。\n\n本セッションでは、以下の取り組みを中心に、OmiaiのFlutterリプレイスについて紹介します。\n\n• マルチパッケージ構成を活用し、依存の向きを厳密に管理したアーキテクチャ\n• 業務ロジック層およびそれより抽象的な層のユニットテストをカバレッジ100%で記述する運用\n• public_member_api_docsの全面適用など、採用しているlintルールやcustom_lint\n• Flutter経験のないエンジニアができるだけスムーズに開発に参画できるキャッチアップ方法\n• マージとデプロイのタイミングを分離したブランチ運用とリリースフロー\n• Add-to-Appによる段階的なリプレイス\n\n## 想定視聴者\n• Flutter プロジェクトをこれから立ち上げる方\n• 既存プロジェクトの開発生産性や保守性に課題を感じている方\n• アーキテクチャ設計、テスト戦略、チーム育成などの知見を得たい方","starts_at":"2024-11-22T07:30:00+00:00","ends_at":"2024-11-22T08:10:00+00:00","is_lightning_talk":false,"video_url":"https://www.youtube.com/watch?v=-G4bqRTlrhA","speakers":[{"id":"e63e4871-1e52-41f5-845c-335a0ec77e66","name":"Kosuke Saigusa","avatar_name":"e63e4871-1e52-41f5-845c-335a0ec77e66.webp","x_id":"KosukeSaigusa"}],"sponsors":[{"id":21,"name":"株式会社Omiai","logo_name":"02ad860c-e534-44ad-80ad-8395e5304b9f.webp","description":"Omiaiは、累計1000万ユーザーが利用するプロダクトであり、「結婚を見据えた真面目な出会い」をコンセプトに30代のユーザーを中心に利用されています。\n\n社会影響としては、年間約6万人以上がOmiaiで出会い、その後多数がご結婚され、結婚数や少子化対策にも貢献している状況です。行政との提携も複数あります。\n\nエンジニアリングにおいては、新機能開発、新技術導入や改善を常時走らせており、チャレンジも多いです。チャレンジが多いからこそ、開発に集中しやすい環境を大切にしています。","url":"https://enito.co.jp/","type":"gold","sort_id":10}]},{"id":"454605d6-b1b5-40f4-85c6-1636a6c32b1a","title":"Flutterアプリで可用性を向上させたFeatureFlagの運用戦略とその方法","description":"## 概要\nWINTICKETアプリは2021年からトランクベース開発をFeatureFlagを取り入れながら行ってきました。\n大規模が故に常に10数個のFeatureFlagをコードベースに埋め込みながら新機能の開発を進めていますが、公開前の機能が見えてしまったり、リリース前のコードが実行されてしまうなどの問題がいくつかありました。\n\n本セッションではFeatureFlag運用を3年ほどした経験から、WINTICKETアプリ開発での具体的な運用方法とどのように可用性を向上させたFeatureFlagの運用戦略をとっているかを紹介します。\n\n・WINTICKETでどのようにFlutterでFeatureFlagを用いたトランクベース開発の運用をしているかの紹介\n・その運用で実際に起きた不具合例の紹介\n・そのような不具合がどのような原因で発生したのかの分析\n・不具合を起こさないためのFeatureFlag運用戦略とその具体的な対応方法の紹介\n\n## 想定視聴者\n・FeatureFlagを用いたトランクベース開発をしている方\n・FlutterアプリでFeatureFlagを用いたトランクベース開発を検討している方","starts_at":"2024-11-21T04:00:00+00:00","ends_at":"2024-11-21T04:40:00+00:00","is_lightning_talk":false,"video_url":"https://www.youtube.com/watch?v=9Zgqaj8jnug","speakers":[{"id":"08ba6150-1288-4e7e-9cfe-aaf9d6acc5fd","name":"batch","avatar_name":"08ba6150-1288-4e7e-9cfe-aaf9d6acc5fd.webp","x_id":"b4tchkn"}],"sponsors":[]},{"id":"f4966e95-b266-4edc-abde-f61c359b3a40","title":"キャッシュレス決済アプリでのFlutterの部分的採用から全面採用まで","description":"## 概要\nKDDI株式会社では、au PAYアプリを内製開発しており、2023年に部分的にFlutterを採用しました。\n基本的にネイティブ（Kotlin/Swift）で開発しているところに、Add-to-appにより部分的にFlutterを取り入れている形です。\nまた、2024年には、ネイティブで開発してきたau PAYの関連アプリをフルリプレイスする形でFlutterを全面採用することにしました。\nFlutterの全面採用は、アプリ開発では勿論、API-GWの開発でも採用しており、バックエンドを含めたAll Flutterなプロジェクトになっています。\n\n本セッションでは、Flutterの部分的採用から全面採用に至るまでに得られた知見を皆様にお届けします。\n\n・Add-to-appによるFlutterの部分的採用\n  ・Flutterで開発した機能\n  ・部分的採用で得られた恩恵と課題\n  ・状態管理にBlocを採用した話\n・バックエンドも含めたFlutter（Dart）の全面採用\n  ・全面採用に踏み切った理由と狙い\n  ・All Dartによるクロスファンクショナルな開発\n・部分的採用か全面採用かの判断の勘所\n\n## 想定視聴者\n・既存のネイティブアプリにFlutterを部分的に採用することに興味がある方\n・現場でFlutterを部分的に採用するか全面採用にするかで迷われている方","starts_at":"2024-11-21T06:40:00+00:00","ends_at":"2024-11-21T07:20:00+00:00","is_lightning_talk":false,"video_url":"https://www.youtube.com/watch?v=lV86cyGFHyI","speakers":[{"id":"b10930a5-0ae6-4bb7-8035-92a5d435e6c5","name":"Ren Edakawa","avatar_name":"b10930a5-0ae6-4bb7-8035-92a5d435e6c5.webp","x_id":null}],"sponsors":[]},{"id":"6ccbb95b-ddaf-460e-904b-2f91a5ef8d5f","title":"Dart Native Assets で広がる開発の幅","description":"## 概要\nDart や Flutter ではいままで、ビルド時に追加の処理を行う手段がありませんでした。\nしかし最近、 Native Assets と呼ばれる新機能が追加され、ビルド時に追加の処理を行うことが可能になりました。\n本LTでは、 Native Assets とはそもそもどんな機能なのか、どのように活用できるのかをお話しします。\n\n\n## 想定視聴者\nDart/Flutter でアプリやパッケージ開発をする方全般\n特に、FFIを用いた開発をしている方","starts_at":"2024-11-21T09:00:00+00:00","ends_at":"2024-11-21T09:10:00+00:00","is_lightning_talk":true,"video_url":"https://www.youtube.com/watch?v=z1ExeImA2MM","speakers":[{"id":"025ad64a-9d43-43ba-8159-f0fcd9579769","name":"ぎもちん","avatar_name":"025ad64a-9d43-43ba-8159-f0fcd9579769.webp","x_id":"SKKbySSK_TC"}],"sponsors":[]},{"id":"dd12ee26-4d87-4081-a01a-621411231a94","title":"Shorebirdを活用したFlutterアプリの即時アップデート：Code Pushの実践と可能性","description":"本セッションでは、Flutterアプリの「Code Push」（即時コードアップデート）を実現するShorebirdについて深掘りします。Shorebirdを使用することで、FlutterアプリのDartコード部分の更新を、ストア審査なしでエンドユーザーのデバイスに即座に配信できます。\n\nただし、以下の重要な点に注意が必要です：\n- 初回リリースや大幅な変更時は従来通りの審査が必要\n- 更新できるのはDartコードのみ（ネイティブコードは不可）\n- 各アプリストアの規約遵守が必須\n\nこのセッションでは、以下の点に焦点を当てます：\n- Shorebirdの基本概念と仕組み\n- Code Pushの使用方法（ライブデモ含む）\n- CI/CDとの統合\n- 料金体系\n- Shorebirdの利点と課題\n- 実プロジェクトでの経験に基づく知見と教訓\n- アプリストア規約との整合性と法的考慮事項\n\n想定視聴者：\n- 即時アップデートに関心のある開発者\n- Shorebirdを検討中の方\n- 実践的な使用例を知りたい方\n\n複数プロジェクトでのShorebird導入・運用経験を基に、実践的な洞察と具体的なアドバイスを提供します。理論と実践の両面から、Shorebirdの効果的かつ適切な活用方法をお伝えします。技術的側面だけでなく、法的な観点からも安全な利用指針を示します。","starts_at":"2024-11-21T07:40:00+00:00","ends_at":"2024-11-21T08:20:00+00:00","is_lightning_talk":false,"video_url":"https://www.youtube.com/watch?v=iG6ZYrDBuDk","speakers":[{"id":"ab10b87f-1f8a-48f5-b7fc-a4182e4f0a38","name":"Masahiro Aoki","avatar_name":"ab10b87f-1f8a-48f5-b7fc-a4182e4f0a38.webp","x_id":"ma_freud"}],"sponsors":[]},{"id":"02ab1faa-508e-418e-a682-6443148fba5c","title":"Flutterテスト戦略の再考 〜品質と効率のバランスを求めて〜","description":"## 概要\n皆さんが普段開発を行っているプロダクトにおける品質は、どのように保証していますか？QAエンジニアによる検証や、実装者が書くテストなど、さまざまな手法が存在すると思います。\n\nFlutterのテストは一般的に次の3つの種類に分けられます。\n\n- Unit Test\n- Widget Test\n- Integration Test\n\nこれらのテストはそれぞれ異なる役割を持ち、プロダクトの品質を高めるために重要です。特に、Unit TestやWidget Testに分類されるVRT（Visual Regression Testing）であるGolden Testを一度は耳にしたことがある方も多いのではないでしょうか？\n\nしかし、それらのテストを有効かつ効率的に、そしてメンバーに納得感を持ってもらった状態で導入することは決して容易ではありません。\n\n本セッションでは、以下のポイントについて議論します。\n\n各種テストの役割とその効果的な導入方法\nUI/UXを分けて考えてテストする方法\n小さく始めるためのプラクティス\n\nFlutterプロジェクトにおける品質保証とテスト効率のバランスを最適化するための具体的なアプローチを提供します。\n\n## 想定視聴者\n- テスト戦略について議論がしたい人\n- テストを始めたい、またはすでに導入はできているがあまり効果を実感できていない人","starts_at":"2024-11-21T08:40:00+00:00","ends_at":"2024-11-21T08:50:00+00:00","is_lightning_talk":true,"video_url":"https://www.youtube.com/watch?v=2VBGCfNxqMo","speakers":[{"id":"83283261-e532-4df0-b0ee-ee66afb7d79e","name":"としき","avatar_name":"83283261-e532-4df0-b0ee-ee66afb7d79e.webp","x_id":"osadakun9"}],"sponsors":[]},{"id":"ed95a319-5971-4335-b285-390768dc1be7","title":"僕のstate restorationアカデミア","description":"## 概要\n\nユーザーとして、この場面を想像してみてください：アプリAで長文を入力中、何度か他のアプリBに切り替えて使用し、アプリAに戻ったところ、突然すべてのデータが消えてしまいました。OSがアプリAを終了させてしまったのです！それはあまり良くないuxですね。開発者として、どうやってユーザーを挙動不審な行動に対して守ることができますか？実は、state restorationという簡単な解決方法があります。状態管理についてよく話しますが、state restorationのことを忘れることがあります。最新の個人開発アプリ「Japanana」ではこの機能が必要でしたので、実際の例を使ってその実装方法をこの発表で紹介したいと思います。\n\n## 想定視聴者\n\n• State restorationについて理解したい開発者\n• State restorationを実装したく、その方法を学びたい開発者\n• State restorationを実装した後、テスト方法を学びたい開発者","starts_at":"2024-11-21T08:50:00+00:00","ends_at":"2024-11-21T09:00:00+00:00","is_lightning_talk":true,"video_url":"https://www.youtube.com/watch?v=ZEpcXKXSIyI","speakers":[{"id":"1e6af66f-ac45-4f0d-a958-4ffd7239d1e4","name":"金ちゃん","avatar_name":"1e6af66f-ac45-4f0d-a958-4ffd7239d1e4.webp","x_id":"LucasGoldner"}],"sponsors":[]},{"id":"00af53a6-db85-46b9-a10b-e92a6b1232a4","title":"ネットスーパーがスクリーンリーダーに対応した話 ~あるいはアクセシビリティ向上によるユーザー獲得~","description":"## 概要\n\n令和6年（2024年）4月1日に「改正障害者差別解消法」が施行され、事業者による障害のある方への合理的配慮の提供が義務化されました。ECサイトにおいては誰もが安心してサービスを利用できるように、ウェブアクセシビリティの確保が求められています。\n\nそんななか、私が所属する株式会社10Xで提供している小売チェーン向けECプラットフォームStailerでは視覚障害者の方により便利なネットスーパー・ネットドラッグストア利用体験を提供すべく、スクリーンリーダー（音声読み上げソフト）対応を実施しました。\n\nスクリーンリーダーはFlutterがフレームワークとしてサポートするアクセシビリティ機能の一つでもあります。他にはフォントサイズやコントラストがサポートされています。\n\nこのセッションではFlutterが提供するスクリーンリーダーをサポートする機能について説明するとともに、実際にStailerがスクリーンリーダーに対応した際に困ったことやワークアラウンドの紹介、チームにスクリーンリーダー対応を広めるための活動などをお話します。\n\n参考 https://product.10x.co.jp/entry/2024/07/01/124355\n\n## 想定視聴者\n- アクセシビリティ対応に興味がある方\n- チームの実装方針を決めたり広めたりすることがある方","starts_at":"2024-11-21T02:00:00+00:00","ends_at":"2024-11-21T02:40:00+00:00","is_lightning_talk":false,"video_url":"https://www.youtube.com/watch?v=IXEgISM5-N8","speakers":[{"id":"f50c024e-bd44-4740-b343-37a3e6fa71d7","name":"futabooo","avatar_name":"f50c024e-bd44-4740-b343-37a3e6fa71d7.webp","x_id":"futabooo"}],"sponsors":[]},{"id":"5fa4f6aa-47ef-40d9-b6bb-216493ffc1b1","title":"実践的パッケージ戦略","description":"## 概要\nアプリケーションの機能やレイヤーをディレクトリで分けて表現することは普通に行うことだと思います。\nこのディレクトリの構成を機能単位やレイヤーでパッケージ化します。\n\nパッケージ化すると機能ごとの依存度が減り、意図しない機能を実行する危険性を減らすことができます。\nまた、単一のパッケージのみテストを実行したり、依存度が少ないことで機能を切り離したりすることも比較的容易になります。\n\nただし、レイヤーでパッケージ化する場合はある程度入念な設計が必要になります。\n例えば、 UI から直接通信処理を実行させたくないような場合、単純にパッケージを分割しているだけではファイルをインポートすることで簡単に処理を実行できてしまい、あまりその恩恵を受けることができません。\nこの恩恵を受けるための一つの手法として依存性逆転の原則があります。\n\nここでは、 Riverpod を利用した依存性逆転の原則の実装の説明と melos を利用した依存の解決方法、並列でテストを実行した際のカバレッジの算出など、開発の現場で行った実践的なお話をさせてもらいます。\n\n## 想定視聴者\n- これからサービスを立ち上げる方\n- アプリケーションが大きくなって依存の整理に苦しんでいる方","starts_at":"2024-11-21T05:50:00+00:00","ends_at":"2024-11-21T06:30:00+00:00","is_lightning_talk":false,"video_url":"https://www.youtube.com/watch?v=PVpx24S-PPo","speakers":[{"id":"7f7e92a6-48d1-4263-95c6-4cf6c8810434","name":"KyoheiG3","avatar_name":"7f7e92a6-48d1-4263-95c6-4cf6c8810434.webp","x_id":"KyoheiG3"}],"sponsors":[]},{"id":"6cda6895-57f8-47dc-ab29-ebcbd9c7f95a","title":"気をつけたい！Desktop対応で陥りやすい罠とその対策","description":"## 概要\nMobile向けに開発したものをWebや他のDesktopプラットフォームで表示すると、「なんか違う？」と感じたことはありませんか？\n本セッションでは、MobileとDesktopをワンソースで開発する中で遭遇した実際の事例を基に、Desktopプラットフォームでの開発時に特に注意が必要なポイントを詳しく解説します。\n\n- MobileとDesktopプラットフォームの違いについての概要\n- プロジェクトで遭遇した具体的な事例の紹介\n- 注意が必要なWidgetと、それぞれの対応策\n- プラットフォームごとの差分を考慮した開発手法の提案\n\n## 想定視聴者\n- MobileアプリをDesktopプラットフォームに展開しようと考えている方\n- Desktopプラットフォームでの開発に興味がある方\n- ワンソースでの複数プラットフォーム対応に挑戦している方\n- Desktopプラットフォームの開発経験が少ない方","starts_at":"2024-11-22T04:30:00+00:00","ends_at":"2024-11-22T05:10:00+00:00","is_lightning_talk":false,"video_url":"https://www.youtube.com/watch?v=GcrbW2RrU3M","speakers":[{"id":"eff9b7c7-46ed-4839-afe6-8b2bf2df72b5","name":"後藤 孝輔","avatar_name":"eff9b7c7-46ed-4839-afe6-8b2bf2df72b5.webp","x_id":"Gotchi0001"}],"sponsors":[]},{"id":"c56e7002-02e3-44d5-825c-b64934d12288","title":"Effective Form ~ Flutterによる複雑なフォーム開発の実践 ~","description":"## 概要\n\n「フォーム」を取り扱うアプリの機能実装は、考慮すべき点が多岐に渡り、難易度が非常に高い部分です。\n\n例えば、商品注文や申請作成の入力画面は、単純な入力画面とは性質が異なり、複雑な仕様の中でミスができない実装が求められます。\nそこでは、高度なバリデーションや、複数ソースからの動的なデータ取得・更新など、「複雑なロジックをフロントで実装する必要がある」点で多くの課題が存在します。\n\nFlutterの活用は、開発効率を上げる有効な手段の１つですが、単に導入するだけでは上記課題は解消しきれません。\n本トークでは、複雑度が極めて高いフォーム開発を、宣言的かつ型安全に保つことで、効率的に実現する方法をご紹介します。\n\nトピック\n\n- Flutterでのフォーム画面開発\n  - 実プロダクトの事例紹介\n- 状態管理とバリデーションのアプローチ\n  - 状態設計の手法\n  - Riverpod, flutter_hooksの活用\n  - フォーム要素間の相互依存関係の処理\n  - 複数画面間でのデータ同期の実装\n- ユーザー体験向上の工夫\n  - エラー、アラートのフィードバック\n  - 入力補助\n  - 細かな操作感\n\n## 想定視聴者\n\n- フォーム開発の設計や実装に悩んだことがある方\n- Flutterを使って効率的に複雑なフォームを実装したい方","starts_at":"2024-11-22T08:30:00+00:00","ends_at":"2024-11-22T09:10:00+00:00","is_lightning_talk":false,"video_url":"https://www.youtube.com/watch?v=a4cxyE9zKSE","speakers":[{"id":"2a8b459b-10a2-4b8f-a240-c5bad7a06541","name":"たまねぎ","avatar_name":"2a8b459b-10a2-4b8f-a240-c5bad7a06541.webp","x_id":"_chocoyama"}],"sponsors":[]},{"id":"83897c0b-3a06-48a3-99e8-584195e318ac","title":"Firebase Dynamic Links終了に備える：FlutterアプリでのAdjust導入とディープリンク最適化","description":"## 概要\n2025年8月にFirebase Dynamic Links（FDL）のサービスが終了することが発表され、多くのアプリ開発者がAdjust、AppsFlyer、Bitly、Branch、Kochavaなど代替ソリューションの選定を迫られています。\n\n本セッションでは、実際のプロダクトで行ったFDLからAdjustへの移行作業を通じて、FDLの主要な機能をカバーしつつ、Adjustを用いたディープリンクの設定方法、ディープリンク機能の実装例、分析に不可欠なログの実装方法、およびパーソナライズされたユーザー体験を提供するための戦略とその制約を紹介します。\n\nこれにより、FDL終了後のアプリ開発において、どのようにスムーズな移行を実現し、必要な機能を維持するかについて、明確な指針を提供します。このセッションを通じて、ディープリンク技術がどのようにアプリの成長と成功を支えるかを理解し、実際の開発に役立つ知識を提供します。\n\n## 想定視聴者\n- FDLを利用したプロダクトを運用しており、代替の移行先を検討している方\n- ユーザーエンゲージメントの向上やアプリの成長に関心があり、ディープリンク技術を活用したいと考えている方","starts_at":"2024-11-22T06:30:00+00:00","ends_at":"2024-11-22T07:10:00+00:00","is_lightning_talk":false,"video_url":"https://www.youtube.com/watch?v=9hl9COiE83I","speakers":[{"id":"b4ec5d7a-95c9-48ef-8643-5963071b713f","name":"techiro","avatar_name":"b4ec5d7a-95c9-48ef-8643-5963071b713f.webp","x_id":"appgrape"}],"sponsors":[]}]}]''';
